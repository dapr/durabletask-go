// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	api "github.com/dapr/durabletask-go/api"
	backend "github.com/dapr/durabletask-go/backend"

	context "context"

	mock "github.com/stretchr/testify/mock"

	protos "github.com/dapr/durabletask-go/api/protos"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// AbandonActivityWorkItem provides a mock function with given fields: _a0, _a1
func (_m *Backend) AbandonActivityWorkItem(_a0 context.Context, _a1 *backend.ActivityWorkItem) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AbandonActivityWorkItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backend.ActivityWorkItem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_AbandonActivityWorkItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbandonActivityWorkItem'
type Backend_AbandonActivityWorkItem_Call struct {
	*mock.Call
}

// AbandonActivityWorkItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *backend.ActivityWorkItem
func (_e *Backend_Expecter) AbandonActivityWorkItem(_a0 interface{}, _a1 interface{}) *Backend_AbandonActivityWorkItem_Call {
	return &Backend_AbandonActivityWorkItem_Call{Call: _e.mock.On("AbandonActivityWorkItem", _a0, _a1)}
}

func (_c *Backend_AbandonActivityWorkItem_Call) Run(run func(_a0 context.Context, _a1 *backend.ActivityWorkItem)) *Backend_AbandonActivityWorkItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backend.ActivityWorkItem))
	})
	return _c
}

func (_c *Backend_AbandonActivityWorkItem_Call) Return(_a0 error) *Backend_AbandonActivityWorkItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_AbandonActivityWorkItem_Call) RunAndReturn(run func(context.Context, *backend.ActivityWorkItem) error) *Backend_AbandonActivityWorkItem_Call {
	_c.Call.Return(run)
	return _c
}

// AbandonOrchestrationWorkItem provides a mock function with given fields: _a0, _a1
func (_m *Backend) AbandonOrchestrationWorkItem(_a0 context.Context, _a1 *backend.OrchestrationWorkItem) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AbandonOrchestrationWorkItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backend.OrchestrationWorkItem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_AbandonOrchestrationWorkItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbandonOrchestrationWorkItem'
type Backend_AbandonOrchestrationWorkItem_Call struct {
	*mock.Call
}

// AbandonOrchestrationWorkItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *backend.OrchestrationWorkItem
func (_e *Backend_Expecter) AbandonOrchestrationWorkItem(_a0 interface{}, _a1 interface{}) *Backend_AbandonOrchestrationWorkItem_Call {
	return &Backend_AbandonOrchestrationWorkItem_Call{Call: _e.mock.On("AbandonOrchestrationWorkItem", _a0, _a1)}
}

func (_c *Backend_AbandonOrchestrationWorkItem_Call) Run(run func(_a0 context.Context, _a1 *backend.OrchestrationWorkItem)) *Backend_AbandonOrchestrationWorkItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backend.OrchestrationWorkItem))
	})
	return _c
}

func (_c *Backend_AbandonOrchestrationWorkItem_Call) Return(_a0 error) *Backend_AbandonOrchestrationWorkItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_AbandonOrchestrationWorkItem_Call) RunAndReturn(run func(context.Context, *backend.OrchestrationWorkItem) error) *Backend_AbandonOrchestrationWorkItem_Call {
	_c.Call.Return(run)
	return _c
}

// AddNewOrchestrationEvent provides a mock function with given fields: _a0, _a1, _a2
func (_m *Backend) AddNewOrchestrationEvent(_a0 context.Context, _a1 api.InstanceID, _a2 *protos.HistoryEvent) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AddNewOrchestrationEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID, *protos.HistoryEvent) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_AddNewOrchestrationEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewOrchestrationEvent'
type Backend_AddNewOrchestrationEvent_Call struct {
	*mock.Call
}

// AddNewOrchestrationEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.InstanceID
//   - _a2 *protos.HistoryEvent
func (_e *Backend_Expecter) AddNewOrchestrationEvent(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Backend_AddNewOrchestrationEvent_Call {
	return &Backend_AddNewOrchestrationEvent_Call{Call: _e.mock.On("AddNewOrchestrationEvent", _a0, _a1, _a2)}
}

func (_c *Backend_AddNewOrchestrationEvent_Call) Run(run func(_a0 context.Context, _a1 api.InstanceID, _a2 *protos.HistoryEvent)) *Backend_AddNewOrchestrationEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InstanceID), args[2].(*protos.HistoryEvent))
	})
	return _c
}

func (_c *Backend_AddNewOrchestrationEvent_Call) Return(_a0 error) *Backend_AddNewOrchestrationEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_AddNewOrchestrationEvent_Call) RunAndReturn(run func(context.Context, api.InstanceID, *protos.HistoryEvent) error) *Backend_AddNewOrchestrationEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CancelActivityTask provides a mock function with given fields: _a0, _a1, _a2
func (_m *Backend) CancelActivityTask(_a0 context.Context, _a1 api.InstanceID, _a2 int32) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CancelActivityTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID, int32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CancelActivityTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelActivityTask'
type Backend_CancelActivityTask_Call struct {
	*mock.Call
}

// CancelActivityTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.InstanceID
//   - _a2 int32
func (_e *Backend_Expecter) CancelActivityTask(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Backend_CancelActivityTask_Call {
	return &Backend_CancelActivityTask_Call{Call: _e.mock.On("CancelActivityTask", _a0, _a1, _a2)}
}

func (_c *Backend_CancelActivityTask_Call) Run(run func(_a0 context.Context, _a1 api.InstanceID, _a2 int32)) *Backend_CancelActivityTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InstanceID), args[2].(int32))
	})
	return _c
}

func (_c *Backend_CancelActivityTask_Call) Return(_a0 error) *Backend_CancelActivityTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CancelActivityTask_Call) RunAndReturn(run func(context.Context, api.InstanceID, int32) error) *Backend_CancelActivityTask_Call {
	_c.Call.Return(run)
	return _c
}

// CancelOrchestratorTask provides a mock function with given fields: _a0, _a1
func (_m *Backend) CancelOrchestratorTask(_a0 context.Context, _a1 api.InstanceID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrchestratorTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CancelOrchestratorTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrchestratorTask'
type Backend_CancelOrchestratorTask_Call struct {
	*mock.Call
}

// CancelOrchestratorTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.InstanceID
func (_e *Backend_Expecter) CancelOrchestratorTask(_a0 interface{}, _a1 interface{}) *Backend_CancelOrchestratorTask_Call {
	return &Backend_CancelOrchestratorTask_Call{Call: _e.mock.On("CancelOrchestratorTask", _a0, _a1)}
}

func (_c *Backend_CancelOrchestratorTask_Call) Run(run func(_a0 context.Context, _a1 api.InstanceID)) *Backend_CancelOrchestratorTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InstanceID))
	})
	return _c
}

func (_c *Backend_CancelOrchestratorTask_Call) Return(_a0 error) *Backend_CancelOrchestratorTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CancelOrchestratorTask_Call) RunAndReturn(run func(context.Context, api.InstanceID) error) *Backend_CancelOrchestratorTask_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteActivityTask provides a mock function with given fields: _a0, _a1
func (_m *Backend) CompleteActivityTask(_a0 context.Context, _a1 *protos.ActivityResponse) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CompleteActivityTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.ActivityResponse) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CompleteActivityTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteActivityTask'
type Backend_CompleteActivityTask_Call struct {
	*mock.Call
}

// CompleteActivityTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protos.ActivityResponse
func (_e *Backend_Expecter) CompleteActivityTask(_a0 interface{}, _a1 interface{}) *Backend_CompleteActivityTask_Call {
	return &Backend_CompleteActivityTask_Call{Call: _e.mock.On("CompleteActivityTask", _a0, _a1)}
}

func (_c *Backend_CompleteActivityTask_Call) Run(run func(_a0 context.Context, _a1 *protos.ActivityResponse)) *Backend_CompleteActivityTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protos.ActivityResponse))
	})
	return _c
}

func (_c *Backend_CompleteActivityTask_Call) Return(_a0 error) *Backend_CompleteActivityTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CompleteActivityTask_Call) RunAndReturn(run func(context.Context, *protos.ActivityResponse) error) *Backend_CompleteActivityTask_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteActivityWorkItem provides a mock function with given fields: _a0, _a1
func (_m *Backend) CompleteActivityWorkItem(_a0 context.Context, _a1 *backend.ActivityWorkItem) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CompleteActivityWorkItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backend.ActivityWorkItem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CompleteActivityWorkItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteActivityWorkItem'
type Backend_CompleteActivityWorkItem_Call struct {
	*mock.Call
}

// CompleteActivityWorkItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *backend.ActivityWorkItem
func (_e *Backend_Expecter) CompleteActivityWorkItem(_a0 interface{}, _a1 interface{}) *Backend_CompleteActivityWorkItem_Call {
	return &Backend_CompleteActivityWorkItem_Call{Call: _e.mock.On("CompleteActivityWorkItem", _a0, _a1)}
}

func (_c *Backend_CompleteActivityWorkItem_Call) Run(run func(_a0 context.Context, _a1 *backend.ActivityWorkItem)) *Backend_CompleteActivityWorkItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backend.ActivityWorkItem))
	})
	return _c
}

func (_c *Backend_CompleteActivityWorkItem_Call) Return(_a0 error) *Backend_CompleteActivityWorkItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CompleteActivityWorkItem_Call) RunAndReturn(run func(context.Context, *backend.ActivityWorkItem) error) *Backend_CompleteActivityWorkItem_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteOrchestrationWorkItem provides a mock function with given fields: _a0, _a1
func (_m *Backend) CompleteOrchestrationWorkItem(_a0 context.Context, _a1 *backend.OrchestrationWorkItem) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOrchestrationWorkItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backend.OrchestrationWorkItem) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CompleteOrchestrationWorkItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteOrchestrationWorkItem'
type Backend_CompleteOrchestrationWorkItem_Call struct {
	*mock.Call
}

// CompleteOrchestrationWorkItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *backend.OrchestrationWorkItem
func (_e *Backend_Expecter) CompleteOrchestrationWorkItem(_a0 interface{}, _a1 interface{}) *Backend_CompleteOrchestrationWorkItem_Call {
	return &Backend_CompleteOrchestrationWorkItem_Call{Call: _e.mock.On("CompleteOrchestrationWorkItem", _a0, _a1)}
}

func (_c *Backend_CompleteOrchestrationWorkItem_Call) Run(run func(_a0 context.Context, _a1 *backend.OrchestrationWorkItem)) *Backend_CompleteOrchestrationWorkItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backend.OrchestrationWorkItem))
	})
	return _c
}

func (_c *Backend_CompleteOrchestrationWorkItem_Call) Return(_a0 error) *Backend_CompleteOrchestrationWorkItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CompleteOrchestrationWorkItem_Call) RunAndReturn(run func(context.Context, *backend.OrchestrationWorkItem) error) *Backend_CompleteOrchestrationWorkItem_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteOrchestratorTask provides a mock function with given fields: _a0, _a1
func (_m *Backend) CompleteOrchestratorTask(_a0 context.Context, _a1 *protos.OrchestratorResponse) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOrchestratorTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.OrchestratorResponse) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CompleteOrchestratorTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteOrchestratorTask'
type Backend_CompleteOrchestratorTask_Call struct {
	*mock.Call
}

// CompleteOrchestratorTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protos.OrchestratorResponse
func (_e *Backend_Expecter) CompleteOrchestratorTask(_a0 interface{}, _a1 interface{}) *Backend_CompleteOrchestratorTask_Call {
	return &Backend_CompleteOrchestratorTask_Call{Call: _e.mock.On("CompleteOrchestratorTask", _a0, _a1)}
}

func (_c *Backend_CompleteOrchestratorTask_Call) Run(run func(_a0 context.Context, _a1 *protos.OrchestratorResponse)) *Backend_CompleteOrchestratorTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protos.OrchestratorResponse))
	})
	return _c
}

func (_c *Backend_CompleteOrchestratorTask_Call) Return(_a0 error) *Backend_CompleteOrchestratorTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CompleteOrchestratorTask_Call) RunAndReturn(run func(context.Context, *protos.OrchestratorResponse) error) *Backend_CompleteOrchestratorTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrchestrationInstance provides a mock function with given fields: _a0, _a1, _a2
func (_m *Backend) CreateOrchestrationInstance(_a0 context.Context, _a1 *protos.HistoryEvent, _a2 ...backend.OrchestrationIdReusePolicyOptions) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrchestrationInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.HistoryEvent, ...backend.OrchestrationIdReusePolicyOptions) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CreateOrchestrationInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrchestrationInstance'
type Backend_CreateOrchestrationInstance_Call struct {
	*mock.Call
}

// CreateOrchestrationInstance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protos.HistoryEvent
//   - _a2 ...backend.OrchestrationIdReusePolicyOptions
func (_e *Backend_Expecter) CreateOrchestrationInstance(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Backend_CreateOrchestrationInstance_Call {
	return &Backend_CreateOrchestrationInstance_Call{Call: _e.mock.On("CreateOrchestrationInstance",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Backend_CreateOrchestrationInstance_Call) Run(run func(_a0 context.Context, _a1 *protos.HistoryEvent, _a2 ...backend.OrchestrationIdReusePolicyOptions)) *Backend_CreateOrchestrationInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]backend.OrchestrationIdReusePolicyOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(backend.OrchestrationIdReusePolicyOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*protos.HistoryEvent), variadicArgs...)
	})
	return _c
}

func (_c *Backend_CreateOrchestrationInstance_Call) Return(_a0 error) *Backend_CreateOrchestrationInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CreateOrchestrationInstance_Call) RunAndReturn(run func(context.Context, *protos.HistoryEvent, ...backend.OrchestrationIdReusePolicyOptions) error) *Backend_CreateOrchestrationInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskHub provides a mock function with given fields: _a0
func (_m *Backend) CreateTaskHub(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskHub")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_CreateTaskHub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskHub'
type Backend_CreateTaskHub_Call struct {
	*mock.Call
}

// CreateTaskHub is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Backend_Expecter) CreateTaskHub(_a0 interface{}) *Backend_CreateTaskHub_Call {
	return &Backend_CreateTaskHub_Call{Call: _e.mock.On("CreateTaskHub", _a0)}
}

func (_c *Backend_CreateTaskHub_Call) Run(run func(_a0 context.Context)) *Backend_CreateTaskHub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_CreateTaskHub_Call) Return(_a0 error) *Backend_CreateTaskHub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_CreateTaskHub_Call) RunAndReturn(run func(context.Context) error) *Backend_CreateTaskHub_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTaskHub provides a mock function with given fields: _a0
func (_m *Backend) DeleteTaskHub(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskHub")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_DeleteTaskHub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTaskHub'
type Backend_DeleteTaskHub_Call struct {
	*mock.Call
}

// DeleteTaskHub is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Backend_Expecter) DeleteTaskHub(_a0 interface{}) *Backend_DeleteTaskHub_Call {
	return &Backend_DeleteTaskHub_Call{Call: _e.mock.On("DeleteTaskHub", _a0)}
}

func (_c *Backend_DeleteTaskHub_Call) Run(run func(_a0 context.Context)) *Backend_DeleteTaskHub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_DeleteTaskHub_Call) Return(_a0 error) *Backend_DeleteTaskHub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_DeleteTaskHub_Call) RunAndReturn(run func(context.Context) error) *Backend_DeleteTaskHub_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrchestrationMetadata provides a mock function with given fields: _a0, _a1
func (_m *Backend) GetOrchestrationMetadata(_a0 context.Context, _a1 api.InstanceID) (*protos.OrchestrationMetadata, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrchestrationMetadata")
	}

	var r0 *protos.OrchestrationMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID) (*protos.OrchestrationMetadata, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID) *protos.OrchestrationMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.OrchestrationMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.InstanceID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetOrchestrationMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrchestrationMetadata'
type Backend_GetOrchestrationMetadata_Call struct {
	*mock.Call
}

// GetOrchestrationMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.InstanceID
func (_e *Backend_Expecter) GetOrchestrationMetadata(_a0 interface{}, _a1 interface{}) *Backend_GetOrchestrationMetadata_Call {
	return &Backend_GetOrchestrationMetadata_Call{Call: _e.mock.On("GetOrchestrationMetadata", _a0, _a1)}
}

func (_c *Backend_GetOrchestrationMetadata_Call) Run(run func(_a0 context.Context, _a1 api.InstanceID)) *Backend_GetOrchestrationMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InstanceID))
	})
	return _c
}

func (_c *Backend_GetOrchestrationMetadata_Call) Return(_a0 *protos.OrchestrationMetadata, _a1 error) *Backend_GetOrchestrationMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetOrchestrationMetadata_Call) RunAndReturn(run func(context.Context, api.InstanceID) (*protos.OrchestrationMetadata, error)) *Backend_GetOrchestrationMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrchestrationRuntimeState provides a mock function with given fields: _a0, _a1
func (_m *Backend) GetOrchestrationRuntimeState(_a0 context.Context, _a1 *backend.OrchestrationWorkItem) (*protos.OrchestrationRuntimeState, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrchestrationRuntimeState")
	}

	var r0 *protos.OrchestrationRuntimeState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backend.OrchestrationWorkItem) (*protos.OrchestrationRuntimeState, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backend.OrchestrationWorkItem) *protos.OrchestrationRuntimeState); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.OrchestrationRuntimeState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backend.OrchestrationWorkItem) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetOrchestrationRuntimeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrchestrationRuntimeState'
type Backend_GetOrchestrationRuntimeState_Call struct {
	*mock.Call
}

// GetOrchestrationRuntimeState is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *backend.OrchestrationWorkItem
func (_e *Backend_Expecter) GetOrchestrationRuntimeState(_a0 interface{}, _a1 interface{}) *Backend_GetOrchestrationRuntimeState_Call {
	return &Backend_GetOrchestrationRuntimeState_Call{Call: _e.mock.On("GetOrchestrationRuntimeState", _a0, _a1)}
}

func (_c *Backend_GetOrchestrationRuntimeState_Call) Run(run func(_a0 context.Context, _a1 *backend.OrchestrationWorkItem)) *Backend_GetOrchestrationRuntimeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backend.OrchestrationWorkItem))
	})
	return _c
}

func (_c *Backend_GetOrchestrationRuntimeState_Call) Return(_a0 *protos.OrchestrationRuntimeState, _a1 error) *Backend_GetOrchestrationRuntimeState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetOrchestrationRuntimeState_Call) RunAndReturn(run func(context.Context, *backend.OrchestrationWorkItem) (*protos.OrchestrationRuntimeState, error)) *Backend_GetOrchestrationRuntimeState_Call {
	_c.Call.Return(run)
	return _c
}

// NextActivityWorkItem provides a mock function with given fields: _a0
func (_m *Backend) NextActivityWorkItem(_a0 context.Context) (*backend.ActivityWorkItem, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextActivityWorkItem")
	}

	var r0 *backend.ActivityWorkItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*backend.ActivityWorkItem, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *backend.ActivityWorkItem); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.ActivityWorkItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_NextActivityWorkItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextActivityWorkItem'
type Backend_NextActivityWorkItem_Call struct {
	*mock.Call
}

// NextActivityWorkItem is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Backend_Expecter) NextActivityWorkItem(_a0 interface{}) *Backend_NextActivityWorkItem_Call {
	return &Backend_NextActivityWorkItem_Call{Call: _e.mock.On("NextActivityWorkItem", _a0)}
}

func (_c *Backend_NextActivityWorkItem_Call) Run(run func(_a0 context.Context)) *Backend_NextActivityWorkItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_NextActivityWorkItem_Call) Return(_a0 *backend.ActivityWorkItem, _a1 error) *Backend_NextActivityWorkItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_NextActivityWorkItem_Call) RunAndReturn(run func(context.Context) (*backend.ActivityWorkItem, error)) *Backend_NextActivityWorkItem_Call {
	_c.Call.Return(run)
	return _c
}

// NextOrchestrationWorkItem provides a mock function with given fields: _a0
func (_m *Backend) NextOrchestrationWorkItem(_a0 context.Context) (*backend.OrchestrationWorkItem, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextOrchestrationWorkItem")
	}

	var r0 *backend.OrchestrationWorkItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*backend.OrchestrationWorkItem, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *backend.OrchestrationWorkItem); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.OrchestrationWorkItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_NextOrchestrationWorkItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextOrchestrationWorkItem'
type Backend_NextOrchestrationWorkItem_Call struct {
	*mock.Call
}

// NextOrchestrationWorkItem is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Backend_Expecter) NextOrchestrationWorkItem(_a0 interface{}) *Backend_NextOrchestrationWorkItem_Call {
	return &Backend_NextOrchestrationWorkItem_Call{Call: _e.mock.On("NextOrchestrationWorkItem", _a0)}
}

func (_c *Backend_NextOrchestrationWorkItem_Call) Run(run func(_a0 context.Context)) *Backend_NextOrchestrationWorkItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_NextOrchestrationWorkItem_Call) Return(_a0 *backend.OrchestrationWorkItem, _a1 error) *Backend_NextOrchestrationWorkItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_NextOrchestrationWorkItem_Call) RunAndReturn(run func(context.Context) (*backend.OrchestrationWorkItem, error)) *Backend_NextOrchestrationWorkItem_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeOrchestrationState provides a mock function with given fields: _a0, _a1
func (_m *Backend) PurgeOrchestrationState(_a0 context.Context, _a1 api.InstanceID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PurgeOrchestrationState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_PurgeOrchestrationState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeOrchestrationState'
type Backend_PurgeOrchestrationState_Call struct {
	*mock.Call
}

// PurgeOrchestrationState is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.InstanceID
func (_e *Backend_Expecter) PurgeOrchestrationState(_a0 interface{}, _a1 interface{}) *Backend_PurgeOrchestrationState_Call {
	return &Backend_PurgeOrchestrationState_Call{Call: _e.mock.On("PurgeOrchestrationState", _a0, _a1)}
}

func (_c *Backend_PurgeOrchestrationState_Call) Run(run func(_a0 context.Context, _a1 api.InstanceID)) *Backend_PurgeOrchestrationState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InstanceID))
	})
	return _c
}

func (_c *Backend_PurgeOrchestrationState_Call) Return(_a0 error) *Backend_PurgeOrchestrationState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_PurgeOrchestrationState_Call) RunAndReturn(run func(context.Context, api.InstanceID) error) *Backend_PurgeOrchestrationState_Call {
	_c.Call.Return(run)
	return _c
}

// RerunWorkflowFromEvent provides a mock function with given fields: ctx, req
func (_m *Backend) RerunWorkflowFromEvent(ctx context.Context, req *protos.RerunWorkflowFromEventRequest) (api.InstanceID, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RerunWorkflowFromEvent")
	}

	var r0 api.InstanceID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RerunWorkflowFromEventRequest) (api.InstanceID, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RerunWorkflowFromEventRequest) api.InstanceID); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(api.InstanceID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.RerunWorkflowFromEventRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_RerunWorkflowFromEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RerunWorkflowFromEvent'
type Backend_RerunWorkflowFromEvent_Call struct {
	*mock.Call
}

// RerunWorkflowFromEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - req *protos.RerunWorkflowFromEventRequest
func (_e *Backend_Expecter) RerunWorkflowFromEvent(ctx interface{}, req interface{}) *Backend_RerunWorkflowFromEvent_Call {
	return &Backend_RerunWorkflowFromEvent_Call{Call: _e.mock.On("RerunWorkflowFromEvent", ctx, req)}
}

func (_c *Backend_RerunWorkflowFromEvent_Call) Run(run func(ctx context.Context, req *protos.RerunWorkflowFromEventRequest)) *Backend_RerunWorkflowFromEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protos.RerunWorkflowFromEventRequest))
	})
	return _c
}

func (_c *Backend_RerunWorkflowFromEvent_Call) Return(_a0 api.InstanceID, _a1 error) *Backend_RerunWorkflowFromEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_RerunWorkflowFromEvent_Call) RunAndReturn(run func(context.Context, *protos.RerunWorkflowFromEventRequest) (api.InstanceID, error)) *Backend_RerunWorkflowFromEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *Backend) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Backend_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Backend_Expecter) Start(_a0 interface{}) *Backend_Start_Call {
	return &Backend_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *Backend_Start_Call) Run(run func(_a0 context.Context)) *Backend_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_Start_Call) Return(_a0 error) *Backend_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Start_Call) RunAndReturn(run func(context.Context) error) *Backend_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0
func (_m *Backend) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Backend_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Backend_Expecter) Stop(_a0 interface{}) *Backend_Stop_Call {
	return &Backend_Stop_Call{Call: _e.mock.On("Stop", _a0)}
}

func (_c *Backend_Stop_Call) Run(run func(_a0 context.Context)) *Backend_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_Stop_Call) Return(_a0 error) *Backend_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Stop_Call) RunAndReturn(run func(context.Context) error) *Backend_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForActivityCompletion provides a mock function with given fields: _a0, _a1
func (_m *Backend) WaitForActivityCompletion(_a0 context.Context, _a1 *protos.ActivityRequest) (*protos.ActivityResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WaitForActivityCompletion")
	}

	var r0 *protos.ActivityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.ActivityRequest) (*protos.ActivityResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.ActivityRequest) *protos.ActivityResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.ActivityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.ActivityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_WaitForActivityCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForActivityCompletion'
type Backend_WaitForActivityCompletion_Call struct {
	*mock.Call
}

// WaitForActivityCompletion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protos.ActivityRequest
func (_e *Backend_Expecter) WaitForActivityCompletion(_a0 interface{}, _a1 interface{}) *Backend_WaitForActivityCompletion_Call {
	return &Backend_WaitForActivityCompletion_Call{Call: _e.mock.On("WaitForActivityCompletion", _a0, _a1)}
}

func (_c *Backend_WaitForActivityCompletion_Call) Run(run func(_a0 context.Context, _a1 *protos.ActivityRequest)) *Backend_WaitForActivityCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protos.ActivityRequest))
	})
	return _c
}

func (_c *Backend_WaitForActivityCompletion_Call) Return(_a0 *protos.ActivityResponse, _a1 error) *Backend_WaitForActivityCompletion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_WaitForActivityCompletion_Call) RunAndReturn(run func(context.Context, *protos.ActivityRequest) (*protos.ActivityResponse, error)) *Backend_WaitForActivityCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForOrchestratorCompletion provides a mock function with given fields: _a0, _a1
func (_m *Backend) WaitForOrchestratorCompletion(_a0 context.Context, _a1 *protos.OrchestratorRequest) (*protos.OrchestratorResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WaitForOrchestratorCompletion")
	}

	var r0 *protos.OrchestratorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.OrchestratorRequest) (*protos.OrchestratorResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.OrchestratorRequest) *protos.OrchestratorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.OrchestratorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.OrchestratorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_WaitForOrchestratorCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForOrchestratorCompletion'
type Backend_WaitForOrchestratorCompletion_Call struct {
	*mock.Call
}

// WaitForOrchestratorCompletion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *protos.OrchestratorRequest
func (_e *Backend_Expecter) WaitForOrchestratorCompletion(_a0 interface{}, _a1 interface{}) *Backend_WaitForOrchestratorCompletion_Call {
	return &Backend_WaitForOrchestratorCompletion_Call{Call: _e.mock.On("WaitForOrchestratorCompletion", _a0, _a1)}
}

func (_c *Backend_WaitForOrchestratorCompletion_Call) Run(run func(_a0 context.Context, _a1 *protos.OrchestratorRequest)) *Backend_WaitForOrchestratorCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protos.OrchestratorRequest))
	})
	return _c
}

func (_c *Backend_WaitForOrchestratorCompletion_Call) Return(_a0 *protos.OrchestratorResponse, _a1 error) *Backend_WaitForOrchestratorCompletion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_WaitForOrchestratorCompletion_Call) RunAndReturn(run func(context.Context, *protos.OrchestratorRequest) (*protos.OrchestratorResponse, error)) *Backend_WaitForOrchestratorCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// WatchOrchestrationRuntimeStatus provides a mock function with given fields: ctx, id, condition
func (_m *Backend) WatchOrchestrationRuntimeStatus(ctx context.Context, id api.InstanceID, condition func(*protos.OrchestrationMetadata) bool) error {
	ret := _m.Called(ctx, id, condition)

	if len(ret) == 0 {
		panic("no return value specified for WatchOrchestrationRuntimeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InstanceID, func(*protos.OrchestrationMetadata) bool) error); ok {
		r0 = rf(ctx, id, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_WatchOrchestrationRuntimeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchOrchestrationRuntimeStatus'
type Backend_WatchOrchestrationRuntimeStatus_Call struct {
	*mock.Call
}

// WatchOrchestrationRuntimeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id api.InstanceID
//   - condition func(*protos.OrchestrationMetadata) bool
func (_e *Backend_Expecter) WatchOrchestrationRuntimeStatus(ctx interface{}, id interface{}, condition interface{}) *Backend_WatchOrchestrationRuntimeStatus_Call {
	return &Backend_WatchOrchestrationRuntimeStatus_Call{Call: _e.mock.On("WatchOrchestrationRuntimeStatus", ctx, id, condition)}
}

func (_c *Backend_WatchOrchestrationRuntimeStatus_Call) Run(run func(ctx context.Context, id api.InstanceID, condition func(*protos.OrchestrationMetadata) bool)) *Backend_WatchOrchestrationRuntimeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InstanceID), args[2].(func(*protos.OrchestrationMetadata) bool))
	})
	return _c
}

func (_c *Backend_WatchOrchestrationRuntimeStatus_Call) Return(_a0 error) *Backend_WatchOrchestrationRuntimeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_WatchOrchestrationRuntimeStatus_Call) RunAndReturn(run func(context.Context, api.InstanceID, func(*protos.OrchestrationMetadata) bool) error) *Backend_WatchOrchestrationRuntimeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
