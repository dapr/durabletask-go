// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	backend "github.com/dapr/durabletask-go/backend"

	mock "github.com/stretchr/testify/mock"
)

// TaskWorker is an autogenerated mock type for the TaskWorker type
type TaskWorker[T backend.WorkItem] struct {
	mock.Mock
}

type TaskWorker_Expecter[T backend.WorkItem] struct {
	mock *mock.Mock
}

func (_m *TaskWorker[T]) EXPECT() *TaskWorker_Expecter[T] {
	return &TaskWorker_Expecter[T]{mock: &_m.Mock}
}

// Start provides a mock function with given fields: _a0
func (_m *TaskWorker[T]) Start(_a0 context.Context) {
	_m.Called(_a0)
}

// TaskWorker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type TaskWorker_Start_Call[T backend.WorkItem] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TaskWorker_Expecter[T]) Start(_a0 interface{}) *TaskWorker_Start_Call[T] {
	return &TaskWorker_Start_Call[T]{Call: _e.mock.On("Start", _a0)}
}

func (_c *TaskWorker_Start_Call[T]) Run(run func(_a0 context.Context)) *TaskWorker_Start_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskWorker_Start_Call[T]) Return() *TaskWorker_Start_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TaskWorker_Start_Call[T]) RunAndReturn(run func(context.Context)) *TaskWorker_Start_Call[T] {
	_c.Run(run)
	return _c
}

// StopAndDrain provides a mock function with no fields
func (_m *TaskWorker[T]) StopAndDrain() {
	_m.Called()
}

// TaskWorker_StopAndDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAndDrain'
type TaskWorker_StopAndDrain_Call[T backend.WorkItem] struct {
	*mock.Call
}

// StopAndDrain is a helper method to define mock.On call
func (_e *TaskWorker_Expecter[T]) StopAndDrain() *TaskWorker_StopAndDrain_Call[T] {
	return &TaskWorker_StopAndDrain_Call[T]{Call: _e.mock.On("StopAndDrain")}
}

func (_c *TaskWorker_StopAndDrain_Call[T]) Run(run func()) *TaskWorker_StopAndDrain_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskWorker_StopAndDrain_Call[T]) Return() *TaskWorker_StopAndDrain_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *TaskWorker_StopAndDrain_Call[T]) RunAndReturn(run func()) *TaskWorker_StopAndDrain_Call[T] {
	_c.Run(run)
	return _c
}

// NewTaskWorker creates a new instance of TaskWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskWorker[T backend.WorkItem](t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskWorker[T] {
	mock := &TaskWorker[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
