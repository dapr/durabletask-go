// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.29.3
// source: orchestrator_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrchestrationStatus int32

const (
	OrchestrationStatus_ORCHESTRATION_STATUS_RUNNING          OrchestrationStatus = 0
	OrchestrationStatus_ORCHESTRATION_STATUS_COMPLETED        OrchestrationStatus = 1
	OrchestrationStatus_ORCHESTRATION_STATUS_CONTINUED_AS_NEW OrchestrationStatus = 2
	OrchestrationStatus_ORCHESTRATION_STATUS_FAILED           OrchestrationStatus = 3
	OrchestrationStatus_ORCHESTRATION_STATUS_CANCELED         OrchestrationStatus = 4
	OrchestrationStatus_ORCHESTRATION_STATUS_TERMINATED       OrchestrationStatus = 5
	OrchestrationStatus_ORCHESTRATION_STATUS_PENDING          OrchestrationStatus = 6
	OrchestrationStatus_ORCHESTRATION_STATUS_SUSPENDED        OrchestrationStatus = 7
)

// Enum value maps for OrchestrationStatus.
var (
	OrchestrationStatus_name = map[int32]string{
		0: "ORCHESTRATION_STATUS_RUNNING",
		1: "ORCHESTRATION_STATUS_COMPLETED",
		2: "ORCHESTRATION_STATUS_CONTINUED_AS_NEW",
		3: "ORCHESTRATION_STATUS_FAILED",
		4: "ORCHESTRATION_STATUS_CANCELED",
		5: "ORCHESTRATION_STATUS_TERMINATED",
		6: "ORCHESTRATION_STATUS_PENDING",
		7: "ORCHESTRATION_STATUS_SUSPENDED",
	}
	OrchestrationStatus_value = map[string]int32{
		"ORCHESTRATION_STATUS_RUNNING":          0,
		"ORCHESTRATION_STATUS_COMPLETED":        1,
		"ORCHESTRATION_STATUS_CONTINUED_AS_NEW": 2,
		"ORCHESTRATION_STATUS_FAILED":           3,
		"ORCHESTRATION_STATUS_CANCELED":         4,
		"ORCHESTRATION_STATUS_TERMINATED":       5,
		"ORCHESTRATION_STATUS_PENDING":          6,
		"ORCHESTRATION_STATUS_SUSPENDED":        7,
	}
)

func (x OrchestrationStatus) Enum() *OrchestrationStatus {
	p := new(OrchestrationStatus)
	*p = x
	return p
}

func (x OrchestrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrchestrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_orchestrator_service_proto_enumTypes[0].Descriptor()
}

func (OrchestrationStatus) Type() protoreflect.EnumType {
	return &file_orchestrator_service_proto_enumTypes[0]
}

func (x OrchestrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrchestrationStatus.Descriptor instead.
func (OrchestrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{0}
}

type CreateOrchestrationAction int32

const (
	CreateOrchestrationAction_ERROR     CreateOrchestrationAction = 0
	CreateOrchestrationAction_IGNORE    CreateOrchestrationAction = 1
	CreateOrchestrationAction_TERMINATE CreateOrchestrationAction = 2
)

// Enum value maps for CreateOrchestrationAction.
var (
	CreateOrchestrationAction_name = map[int32]string{
		0: "ERROR",
		1: "IGNORE",
		2: "TERMINATE",
	}
	CreateOrchestrationAction_value = map[string]int32{
		"ERROR":     0,
		"IGNORE":    1,
		"TERMINATE": 2,
	}
)

func (x CreateOrchestrationAction) Enum() *CreateOrchestrationAction {
	p := new(CreateOrchestrationAction)
	*p = x
	return p
}

func (x CreateOrchestrationAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateOrchestrationAction) Descriptor() protoreflect.EnumDescriptor {
	return file_orchestrator_service_proto_enumTypes[1].Descriptor()
}

func (CreateOrchestrationAction) Type() protoreflect.EnumType {
	return &file_orchestrator_service_proto_enumTypes[1]
}

func (x CreateOrchestrationAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateOrchestrationAction.Descriptor instead.
func (CreateOrchestrationAction) EnumDescriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{1}
}

type WorkerCapability int32

const (
	WorkerCapability_WORKER_CAPABILITY_UNSPECIFIED WorkerCapability = 0
	// Indicates that the worker is capable of streaming instance history as a more optimized
	// alternative to receiving the full history embedded in the orchestrator work-item.
	// When set, the service may return work items without any history events as an optimization.
	// It is strongly recommended that all SDKs support this capability.
	WorkerCapability_WORKER_CAPABILITY_HISTORY_STREAMING WorkerCapability = 1
)

// Enum value maps for WorkerCapability.
var (
	WorkerCapability_name = map[int32]string{
		0: "WORKER_CAPABILITY_UNSPECIFIED",
		1: "WORKER_CAPABILITY_HISTORY_STREAMING",
	}
	WorkerCapability_value = map[string]int32{
		"WORKER_CAPABILITY_UNSPECIFIED":       0,
		"WORKER_CAPABILITY_HISTORY_STREAMING": 1,
	}
)

func (x WorkerCapability) Enum() *WorkerCapability {
	p := new(WorkerCapability)
	*p = x
	return p
}

func (x WorkerCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_orchestrator_service_proto_enumTypes[2].Descriptor()
}

func (WorkerCapability) Type() protoreflect.EnumType {
	return &file_orchestrator_service_proto_enumTypes[2]
}

func (x WorkerCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerCapability.Descriptor instead.
func (WorkerCapability) EnumDescriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{2}
}

type OrchestrationInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId  string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ExecutionId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=executionId,proto3" json:"executionId,omitempty"`
}

func (x *OrchestrationInstance) Reset() {
	*x = OrchestrationInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestrationInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestrationInstance) ProtoMessage() {}

func (x *OrchestrationInstance) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestrationInstance.ProtoReflect.Descriptor instead.
func (*OrchestrationInstance) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{0}
}

func (x *OrchestrationInstance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OrchestrationInstance) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

type ActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Input                 *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	OrchestrationInstance *OrchestrationInstance  `protobuf:"bytes,4,opt,name=orchestrationInstance,proto3" json:"orchestrationInstance,omitempty"`
	TaskId                int32                   `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ParentTraceContext    *TraceContext           `protobuf:"bytes,6,opt,name=parentTraceContext,proto3" json:"parentTraceContext,omitempty"`
}

func (x *ActivityRequest) Reset() {
	*x = ActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRequest) ProtoMessage() {}

func (x *ActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRequest.ProtoReflect.Descriptor instead.
func (*ActivityRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityRequest) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ActivityRequest) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ActivityRequest) GetOrchestrationInstance() *OrchestrationInstance {
	if x != nil {
		return x.OrchestrationInstance
	}
	return nil
}

func (x *ActivityRequest) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ActivityRequest) GetParentTraceContext() *TraceContext {
	if x != nil {
		return x.ParentTraceContext
	}
	return nil
}

type ActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId      string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	TaskId          int32                   `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Result          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	FailureDetails  *TaskFailureDetails     `protobuf:"bytes,4,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
	CompletionToken string                  `protobuf:"bytes,5,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
}

func (x *ActivityResponse) Reset() {
	*x = ActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityResponse) ProtoMessage() {}

func (x *ActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityResponse.ProtoReflect.Descriptor instead.
func (*ActivityResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ActivityResponse) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ActivityResponse) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ActivityResponse) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

func (x *ActivityResponse) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

type TaskFailureDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType      string                  `protobuf:"bytes,1,opt,name=errorType,proto3" json:"errorType,omitempty"`
	ErrorMessage   string                  `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	StackTrace     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	InnerFailure   *TaskFailureDetails     `protobuf:"bytes,4,opt,name=innerFailure,proto3" json:"innerFailure,omitempty"`
	IsNonRetriable bool                    `protobuf:"varint,5,opt,name=isNonRetriable,proto3" json:"isNonRetriable,omitempty"`
}

func (x *TaskFailureDetails) Reset() {
	*x = TaskFailureDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFailureDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailureDetails) ProtoMessage() {}

func (x *TaskFailureDetails) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailureDetails.ProtoReflect.Descriptor instead.
func (*TaskFailureDetails) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{3}
}

func (x *TaskFailureDetails) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *TaskFailureDetails) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TaskFailureDetails) GetStackTrace() *wrapperspb.StringValue {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *TaskFailureDetails) GetInnerFailure() *TaskFailureDetails {
	if x != nil {
		return x.InnerFailure
	}
	return nil
}

func (x *TaskFailureDetails) GetIsNonRetriable() bool {
	if x != nil {
		return x.IsNonRetriable
	}
	return false
}

type ParentInstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskScheduledId       int32                   `protobuf:"varint,1,opt,name=taskScheduledId,proto3" json:"taskScheduledId,omitempty"`
	Name                  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	OrchestrationInstance *OrchestrationInstance  `protobuf:"bytes,4,opt,name=orchestrationInstance,proto3" json:"orchestrationInstance,omitempty"`
}

func (x *ParentInstanceInfo) Reset() {
	*x = ParentInstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentInstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentInstanceInfo) ProtoMessage() {}

func (x *ParentInstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentInstanceInfo.ProtoReflect.Descriptor instead.
func (*ParentInstanceInfo) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{4}
}

func (x *ParentInstanceInfo) GetTaskScheduledId() int32 {
	if x != nil {
		return x.TaskScheduledId
	}
	return 0
}

func (x *ParentInstanceInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ParentInstanceInfo) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ParentInstanceInfo) GetOrchestrationInstance() *OrchestrationInstance {
	if x != nil {
		return x.OrchestrationInstance
	}
	return nil
}

type TraceContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceParent string `protobuf:"bytes,1,opt,name=traceParent,proto3" json:"traceParent,omitempty"`
	// Deprecated: Marked as deprecated in orchestrator_service.proto.
	SpanID     string                  `protobuf:"bytes,2,opt,name=spanID,proto3" json:"spanID,omitempty"`
	TraceState *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=traceState,proto3" json:"traceState,omitempty"`
}

func (x *TraceContext) Reset() {
	*x = TraceContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceContext) ProtoMessage() {}

func (x *TraceContext) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceContext.ProtoReflect.Descriptor instead.
func (*TraceContext) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{5}
}

func (x *TraceContext) GetTraceParent() string {
	if x != nil {
		return x.TraceParent
	}
	return ""
}

// Deprecated: Marked as deprecated in orchestrator_service.proto.
func (x *TraceContext) GetSpanID() string {
	if x != nil {
		return x.SpanID
	}
	return ""
}

func (x *TraceContext) GetTraceState() *wrapperspb.StringValue {
	if x != nil {
		return x.TraceState
	}
	return nil
}

type ExecutionStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Input                   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	OrchestrationInstance   *OrchestrationInstance  `protobuf:"bytes,4,opt,name=orchestrationInstance,proto3" json:"orchestrationInstance,omitempty"`
	ParentInstance          *ParentInstanceInfo     `protobuf:"bytes,5,opt,name=parentInstance,proto3" json:"parentInstance,omitempty"`
	ScheduledStartTimestamp *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=scheduledStartTimestamp,proto3" json:"scheduledStartTimestamp,omitempty"`
	ParentTraceContext      *TraceContext           `protobuf:"bytes,7,opt,name=parentTraceContext,proto3" json:"parentTraceContext,omitempty"`
	OrchestrationSpanID     *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=orchestrationSpanID,proto3" json:"orchestrationSpanID,omitempty"`
	Tags                    map[string]string       `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionStartedEvent) Reset() {
	*x = ExecutionStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStartedEvent) ProtoMessage() {}

func (x *ExecutionStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStartedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionStartedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{6}
}

func (x *ExecutionStartedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutionStartedEvent) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ExecutionStartedEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecutionStartedEvent) GetOrchestrationInstance() *OrchestrationInstance {
	if x != nil {
		return x.OrchestrationInstance
	}
	return nil
}

func (x *ExecutionStartedEvent) GetParentInstance() *ParentInstanceInfo {
	if x != nil {
		return x.ParentInstance
	}
	return nil
}

func (x *ExecutionStartedEvent) GetScheduledStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTimestamp
	}
	return nil
}

func (x *ExecutionStartedEvent) GetParentTraceContext() *TraceContext {
	if x != nil {
		return x.ParentTraceContext
	}
	return nil
}

func (x *ExecutionStartedEvent) GetOrchestrationSpanID() *wrapperspb.StringValue {
	if x != nil {
		return x.OrchestrationSpanID
	}
	return nil
}

func (x *ExecutionStartedEvent) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ExecutionCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrchestrationStatus OrchestrationStatus     `protobuf:"varint,1,opt,name=orchestrationStatus,proto3,enum=OrchestrationStatus" json:"orchestrationStatus,omitempty"`
	Result              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	FailureDetails      *TaskFailureDetails     `protobuf:"bytes,3,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
}

func (x *ExecutionCompletedEvent) Reset() {
	*x = ExecutionCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionCompletedEvent) ProtoMessage() {}

func (x *ExecutionCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionCompletedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionCompletedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{7}
}

func (x *ExecutionCompletedEvent) GetOrchestrationStatus() OrchestrationStatus {
	if x != nil {
		return x.OrchestrationStatus
	}
	return OrchestrationStatus_ORCHESTRATION_STATUS_RUNNING
}

func (x *ExecutionCompletedEvent) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecutionCompletedEvent) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type ExecutionTerminatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Recurse bool                    `protobuf:"varint,2,opt,name=recurse,proto3" json:"recurse,omitempty"`
}

func (x *ExecutionTerminatedEvent) Reset() {
	*x = ExecutionTerminatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTerminatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTerminatedEvent) ProtoMessage() {}

func (x *ExecutionTerminatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTerminatedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionTerminatedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{8}
}

func (x *ExecutionTerminatedEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecutionTerminatedEvent) GetRecurse() bool {
	if x != nil {
		return x.Recurse
	}
	return false
}

type TaskScheduledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Input              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	ParentTraceContext *TraceContext           `protobuf:"bytes,4,opt,name=parentTraceContext,proto3" json:"parentTraceContext,omitempty"`
}

func (x *TaskScheduledEvent) Reset() {
	*x = TaskScheduledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskScheduledEvent) ProtoMessage() {}

func (x *TaskScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskScheduledEvent.ProtoReflect.Descriptor instead.
func (*TaskScheduledEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{9}
}

func (x *TaskScheduledEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskScheduledEvent) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *TaskScheduledEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TaskScheduledEvent) GetParentTraceContext() *TraceContext {
	if x != nil {
		return x.ParentTraceContext
	}
	return nil
}

type TaskCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskScheduledId int32                   `protobuf:"varint,1,opt,name=taskScheduledId,proto3" json:"taskScheduledId,omitempty"`
	Result          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskCompletedEvent) Reset() {
	*x = TaskCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCompletedEvent) ProtoMessage() {}

func (x *TaskCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCompletedEvent.ProtoReflect.Descriptor instead.
func (*TaskCompletedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{10}
}

func (x *TaskCompletedEvent) GetTaskScheduledId() int32 {
	if x != nil {
		return x.TaskScheduledId
	}
	return 0
}

func (x *TaskCompletedEvent) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

type TaskFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskScheduledId int32               `protobuf:"varint,1,opt,name=taskScheduledId,proto3" json:"taskScheduledId,omitempty"`
	FailureDetails  *TaskFailureDetails `protobuf:"bytes,2,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
}

func (x *TaskFailedEvent) Reset() {
	*x = TaskFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedEvent) ProtoMessage() {}

func (x *TaskFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedEvent.ProtoReflect.Descriptor instead.
func (*TaskFailedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{11}
}

func (x *TaskFailedEvent) GetTaskScheduledId() int32 {
	if x != nil {
		return x.TaskScheduledId
	}
	return 0
}

func (x *TaskFailedEvent) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type SubOrchestrationInstanceCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId         string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name               string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version            *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Input              *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	ParentTraceContext *TraceContext           `protobuf:"bytes,5,opt,name=parentTraceContext,proto3" json:"parentTraceContext,omitempty"`
}

func (x *SubOrchestrationInstanceCreatedEvent) Reset() {
	*x = SubOrchestrationInstanceCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrchestrationInstanceCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrchestrationInstanceCreatedEvent) ProtoMessage() {}

func (x *SubOrchestrationInstanceCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrchestrationInstanceCreatedEvent.ProtoReflect.Descriptor instead.
func (*SubOrchestrationInstanceCreatedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{12}
}

func (x *SubOrchestrationInstanceCreatedEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SubOrchestrationInstanceCreatedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubOrchestrationInstanceCreatedEvent) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SubOrchestrationInstanceCreatedEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SubOrchestrationInstanceCreatedEvent) GetParentTraceContext() *TraceContext {
	if x != nil {
		return x.ParentTraceContext
	}
	return nil
}

type SubOrchestrationInstanceCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskScheduledId int32                   `protobuf:"varint,1,opt,name=taskScheduledId,proto3" json:"taskScheduledId,omitempty"`
	Result          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SubOrchestrationInstanceCompletedEvent) Reset() {
	*x = SubOrchestrationInstanceCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrchestrationInstanceCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrchestrationInstanceCompletedEvent) ProtoMessage() {}

func (x *SubOrchestrationInstanceCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrchestrationInstanceCompletedEvent.ProtoReflect.Descriptor instead.
func (*SubOrchestrationInstanceCompletedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{13}
}

func (x *SubOrchestrationInstanceCompletedEvent) GetTaskScheduledId() int32 {
	if x != nil {
		return x.TaskScheduledId
	}
	return 0
}

func (x *SubOrchestrationInstanceCompletedEvent) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

type SubOrchestrationInstanceFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskScheduledId int32               `protobuf:"varint,1,opt,name=taskScheduledId,proto3" json:"taskScheduledId,omitempty"`
	FailureDetails  *TaskFailureDetails `protobuf:"bytes,2,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
}

func (x *SubOrchestrationInstanceFailedEvent) Reset() {
	*x = SubOrchestrationInstanceFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrchestrationInstanceFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrchestrationInstanceFailedEvent) ProtoMessage() {}

func (x *SubOrchestrationInstanceFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrchestrationInstanceFailedEvent.ProtoReflect.Descriptor instead.
func (*SubOrchestrationInstanceFailedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{14}
}

func (x *SubOrchestrationInstanceFailedEvent) GetTaskScheduledId() int32 {
	if x != nil {
		return x.TaskScheduledId
	}
	return 0
}

func (x *SubOrchestrationInstanceFailedEvent) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type TimerCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=fireAt,proto3" json:"fireAt,omitempty"`
	Name   *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *TimerCreatedEvent) Reset() {
	*x = TimerCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerCreatedEvent) ProtoMessage() {}

func (x *TimerCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerCreatedEvent.ProtoReflect.Descriptor instead.
func (*TimerCreatedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{15}
}

func (x *TimerCreatedEvent) GetFireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FireAt
	}
	return nil
}

func (x *TimerCreatedEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type TimerFiredEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireAt  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=fireAt,proto3" json:"fireAt,omitempty"`
	TimerId int32                  `protobuf:"varint,2,opt,name=timerId,proto3" json:"timerId,omitempty"`
}

func (x *TimerFiredEvent) Reset() {
	*x = TimerFiredEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerFiredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerFiredEvent) ProtoMessage() {}

func (x *TimerFiredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerFiredEvent.ProtoReflect.Descriptor instead.
func (*TimerFiredEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{16}
}

func (x *TimerFiredEvent) GetFireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FireAt
	}
	return nil
}

func (x *TimerFiredEvent) GetTimerId() int32 {
	if x != nil {
		return x.TimerId
	}
	return 0
}

type OrchestratorStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrchestratorStartedEvent) Reset() {
	*x = OrchestratorStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorStartedEvent) ProtoMessage() {}

func (x *OrchestratorStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorStartedEvent.ProtoReflect.Descriptor instead.
func (*OrchestratorStartedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{17}
}

type OrchestratorCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrchestratorCompletedEvent) Reset() {
	*x = OrchestratorCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorCompletedEvent) ProtoMessage() {}

func (x *OrchestratorCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorCompletedEvent.ProtoReflect.Descriptor instead.
func (*OrchestratorCompletedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{18}
}

type EventSentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name       string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *EventSentEvent) Reset() {
	*x = EventSentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSentEvent) ProtoMessage() {}

func (x *EventSentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSentEvent.ProtoReflect.Descriptor instead.
func (*EventSentEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{19}
}

func (x *EventSentEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EventSentEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventSentEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type EventRaisedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *EventRaisedEvent) Reset() {
	*x = EventRaisedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRaisedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRaisedEvent) ProtoMessage() {}

func (x *EventRaisedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRaisedEvent.ProtoReflect.Descriptor instead.
func (*EventRaisedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{20}
}

func (x *EventRaisedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRaisedEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type GenericEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GenericEvent) Reset() {
	*x = GenericEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericEvent) ProtoMessage() {}

func (x *GenericEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericEvent.ProtoReflect.Descriptor instead.
func (*GenericEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{21}
}

func (x *GenericEvent) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type HistoryStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrchestrationState *OrchestrationState `protobuf:"bytes,1,opt,name=orchestrationState,proto3" json:"orchestrationState,omitempty"`
}

func (x *HistoryStateEvent) Reset() {
	*x = HistoryStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryStateEvent) ProtoMessage() {}

func (x *HistoryStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryStateEvent.ProtoReflect.Descriptor instead.
func (*HistoryStateEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{22}
}

func (x *HistoryStateEvent) GetOrchestrationState() *OrchestrationState {
	if x != nil {
		return x.OrchestrationState
	}
	return nil
}

type ContinueAsNewEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ContinueAsNewEvent) Reset() {
	*x = ContinueAsNewEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueAsNewEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueAsNewEvent) ProtoMessage() {}

func (x *ContinueAsNewEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueAsNewEvent.ProtoReflect.Descriptor instead.
func (*ContinueAsNewEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{23}
}

func (x *ContinueAsNewEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type ExecutionSuspendedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ExecutionSuspendedEvent) Reset() {
	*x = ExecutionSuspendedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionSuspendedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionSuspendedEvent) ProtoMessage() {}

func (x *ExecutionSuspendedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionSuspendedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionSuspendedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{24}
}

func (x *ExecutionSuspendedEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type ExecutionResumedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ExecutionResumedEvent) Reset() {
	*x = ExecutionResumedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionResumedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionResumedEvent) ProtoMessage() {}

func (x *ExecutionResumedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionResumedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionResumedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{25}
}

func (x *ExecutionResumedEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type EntityOperationSignaledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        string                  `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Operation        string                  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	ScheduledTime    *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
	Input            *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	TargetInstanceId *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=targetInstanceId,proto3" json:"targetInstanceId,omitempty"` // used only within histories, null in messages
}

func (x *EntityOperationSignaledEvent) Reset() {
	*x = EntityOperationSignaledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityOperationSignaledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityOperationSignaledEvent) ProtoMessage() {}

func (x *EntityOperationSignaledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityOperationSignaledEvent.ProtoReflect.Descriptor instead.
func (*EntityOperationSignaledEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{26}
}

func (x *EntityOperationSignaledEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *EntityOperationSignaledEvent) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *EntityOperationSignaledEvent) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *EntityOperationSignaledEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EntityOperationSignaledEvent) GetTargetInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetInstanceId
	}
	return nil
}

type EntityOperationCalledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId         string                  `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Operation         string                  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	ScheduledTime     *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
	Input             *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	ParentInstanceId  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=parentInstanceId,proto3" json:"parentInstanceId,omitempty"`   // used only within messages, null in histories
	ParentExecutionId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=parentExecutionId,proto3" json:"parentExecutionId,omitempty"` // used only within messages, null in histories
	TargetInstanceId  *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=targetInstanceId,proto3" json:"targetInstanceId,omitempty"`   // used only within histories, null in messages
}

func (x *EntityOperationCalledEvent) Reset() {
	*x = EntityOperationCalledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityOperationCalledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityOperationCalledEvent) ProtoMessage() {}

func (x *EntityOperationCalledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityOperationCalledEvent.ProtoReflect.Descriptor instead.
func (*EntityOperationCalledEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{27}
}

func (x *EntityOperationCalledEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *EntityOperationCalledEvent) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *EntityOperationCalledEvent) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *EntityOperationCalledEvent) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EntityOperationCalledEvent) GetParentInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentInstanceId
	}
	return nil
}

func (x *EntityOperationCalledEvent) GetParentExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentExecutionId
	}
	return nil
}

func (x *EntityOperationCalledEvent) GetTargetInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetInstanceId
	}
	return nil
}

type EntityLockRequestedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriticalSectionId string                  `protobuf:"bytes,1,opt,name=criticalSectionId,proto3" json:"criticalSectionId,omitempty"`
	LockSet           []string                `protobuf:"bytes,2,rep,name=lockSet,proto3" json:"lockSet,omitempty"`
	Position          int32                   `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	ParentInstanceId  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=parentInstanceId,proto3" json:"parentInstanceId,omitempty"` // used only within messages, null in histories
}

func (x *EntityLockRequestedEvent) Reset() {
	*x = EntityLockRequestedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLockRequestedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLockRequestedEvent) ProtoMessage() {}

func (x *EntityLockRequestedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLockRequestedEvent.ProtoReflect.Descriptor instead.
func (*EntityLockRequestedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{28}
}

func (x *EntityLockRequestedEvent) GetCriticalSectionId() string {
	if x != nil {
		return x.CriticalSectionId
	}
	return ""
}

func (x *EntityLockRequestedEvent) GetLockSet() []string {
	if x != nil {
		return x.LockSet
	}
	return nil
}

func (x *EntityLockRequestedEvent) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *EntityLockRequestedEvent) GetParentInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentInstanceId
	}
	return nil
}

type EntityOperationCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                  `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Output    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *EntityOperationCompletedEvent) Reset() {
	*x = EntityOperationCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityOperationCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityOperationCompletedEvent) ProtoMessage() {}

func (x *EntityOperationCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityOperationCompletedEvent.ProtoReflect.Descriptor instead.
func (*EntityOperationCompletedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{29}
}

func (x *EntityOperationCompletedEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *EntityOperationCompletedEvent) GetOutput() *wrapperspb.StringValue {
	if x != nil {
		return x.Output
	}
	return nil
}

type EntityOperationFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      string              `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	FailureDetails *TaskFailureDetails `protobuf:"bytes,2,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
}

func (x *EntityOperationFailedEvent) Reset() {
	*x = EntityOperationFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityOperationFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityOperationFailedEvent) ProtoMessage() {}

func (x *EntityOperationFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityOperationFailedEvent.ProtoReflect.Descriptor instead.
func (*EntityOperationFailedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{30}
}

func (x *EntityOperationFailedEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *EntityOperationFailedEvent) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type EntityUnlockSentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriticalSectionId string                  `protobuf:"bytes,1,opt,name=criticalSectionId,proto3" json:"criticalSectionId,omitempty"`
	ParentInstanceId  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=parentInstanceId,proto3" json:"parentInstanceId,omitempty"` // used only within messages, null in histories
	TargetInstanceId  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=targetInstanceId,proto3" json:"targetInstanceId,omitempty"` // used only within histories, null in messages
}

func (x *EntityUnlockSentEvent) Reset() {
	*x = EntityUnlockSentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityUnlockSentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityUnlockSentEvent) ProtoMessage() {}

func (x *EntityUnlockSentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityUnlockSentEvent.ProtoReflect.Descriptor instead.
func (*EntityUnlockSentEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{31}
}

func (x *EntityUnlockSentEvent) GetCriticalSectionId() string {
	if x != nil {
		return x.CriticalSectionId
	}
	return ""
}

func (x *EntityUnlockSentEvent) GetParentInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentInstanceId
	}
	return nil
}

func (x *EntityUnlockSentEvent) GetTargetInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.TargetInstanceId
	}
	return nil
}

type EntityLockGrantedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriticalSectionId string `protobuf:"bytes,1,opt,name=criticalSectionId,proto3" json:"criticalSectionId,omitempty"`
}

func (x *EntityLockGrantedEvent) Reset() {
	*x = EntityLockGrantedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLockGrantedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLockGrantedEvent) ProtoMessage() {}

func (x *EntityLockGrantedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLockGrantedEvent.ProtoReflect.Descriptor instead.
func (*EntityLockGrantedEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{32}
}

func (x *EntityLockGrantedEvent) GetCriticalSectionId() string {
	if x != nil {
		return x.CriticalSectionId
	}
	return ""
}

type HistoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   int32                  `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to EventType:
	//
	//	*HistoryEvent_ExecutionStarted
	//	*HistoryEvent_ExecutionCompleted
	//	*HistoryEvent_ExecutionTerminated
	//	*HistoryEvent_TaskScheduled
	//	*HistoryEvent_TaskCompleted
	//	*HistoryEvent_TaskFailed
	//	*HistoryEvent_SubOrchestrationInstanceCreated
	//	*HistoryEvent_SubOrchestrationInstanceCompleted
	//	*HistoryEvent_SubOrchestrationInstanceFailed
	//	*HistoryEvent_TimerCreated
	//	*HistoryEvent_TimerFired
	//	*HistoryEvent_OrchestratorStarted
	//	*HistoryEvent_OrchestratorCompleted
	//	*HistoryEvent_EventSent
	//	*HistoryEvent_EventRaised
	//	*HistoryEvent_GenericEvent
	//	*HistoryEvent_HistoryState
	//	*HistoryEvent_ContinueAsNew
	//	*HistoryEvent_ExecutionSuspended
	//	*HistoryEvent_ExecutionResumed
	//	*HistoryEvent_EntityOperationSignaled
	//	*HistoryEvent_EntityOperationCalled
	//	*HistoryEvent_EntityOperationCompleted
	//	*HistoryEvent_EntityOperationFailed
	//	*HistoryEvent_EntityLockRequested
	//	*HistoryEvent_EntityLockGranted
	//	*HistoryEvent_EntityUnlockSent
	EventType isHistoryEvent_EventType `protobuf_oneof:"eventType"`
}

func (x *HistoryEvent) Reset() {
	*x = HistoryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryEvent) ProtoMessage() {}

func (x *HistoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryEvent.ProtoReflect.Descriptor instead.
func (*HistoryEvent) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{33}
}

func (x *HistoryEvent) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *HistoryEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *HistoryEvent) GetEventType() isHistoryEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *HistoryEvent) GetExecutionStarted() *ExecutionStartedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_ExecutionStarted); ok {
		return x.ExecutionStarted
	}
	return nil
}

func (x *HistoryEvent) GetExecutionCompleted() *ExecutionCompletedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_ExecutionCompleted); ok {
		return x.ExecutionCompleted
	}
	return nil
}

func (x *HistoryEvent) GetExecutionTerminated() *ExecutionTerminatedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_ExecutionTerminated); ok {
		return x.ExecutionTerminated
	}
	return nil
}

func (x *HistoryEvent) GetTaskScheduled() *TaskScheduledEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_TaskScheduled); ok {
		return x.TaskScheduled
	}
	return nil
}

func (x *HistoryEvent) GetTaskCompleted() *TaskCompletedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_TaskCompleted); ok {
		return x.TaskCompleted
	}
	return nil
}

func (x *HistoryEvent) GetTaskFailed() *TaskFailedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_TaskFailed); ok {
		return x.TaskFailed
	}
	return nil
}

func (x *HistoryEvent) GetSubOrchestrationInstanceCreated() *SubOrchestrationInstanceCreatedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_SubOrchestrationInstanceCreated); ok {
		return x.SubOrchestrationInstanceCreated
	}
	return nil
}

func (x *HistoryEvent) GetSubOrchestrationInstanceCompleted() *SubOrchestrationInstanceCompletedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_SubOrchestrationInstanceCompleted); ok {
		return x.SubOrchestrationInstanceCompleted
	}
	return nil
}

func (x *HistoryEvent) GetSubOrchestrationInstanceFailed() *SubOrchestrationInstanceFailedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_SubOrchestrationInstanceFailed); ok {
		return x.SubOrchestrationInstanceFailed
	}
	return nil
}

func (x *HistoryEvent) GetTimerCreated() *TimerCreatedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_TimerCreated); ok {
		return x.TimerCreated
	}
	return nil
}

func (x *HistoryEvent) GetTimerFired() *TimerFiredEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_TimerFired); ok {
		return x.TimerFired
	}
	return nil
}

func (x *HistoryEvent) GetOrchestratorStarted() *OrchestratorStartedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_OrchestratorStarted); ok {
		return x.OrchestratorStarted
	}
	return nil
}

func (x *HistoryEvent) GetOrchestratorCompleted() *OrchestratorCompletedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_OrchestratorCompleted); ok {
		return x.OrchestratorCompleted
	}
	return nil
}

func (x *HistoryEvent) GetEventSent() *EventSentEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EventSent); ok {
		return x.EventSent
	}
	return nil
}

func (x *HistoryEvent) GetEventRaised() *EventRaisedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EventRaised); ok {
		return x.EventRaised
	}
	return nil
}

func (x *HistoryEvent) GetGenericEvent() *GenericEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_GenericEvent); ok {
		return x.GenericEvent
	}
	return nil
}

func (x *HistoryEvent) GetHistoryState() *HistoryStateEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_HistoryState); ok {
		return x.HistoryState
	}
	return nil
}

func (x *HistoryEvent) GetContinueAsNew() *ContinueAsNewEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_ContinueAsNew); ok {
		return x.ContinueAsNew
	}
	return nil
}

func (x *HistoryEvent) GetExecutionSuspended() *ExecutionSuspendedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_ExecutionSuspended); ok {
		return x.ExecutionSuspended
	}
	return nil
}

func (x *HistoryEvent) GetExecutionResumed() *ExecutionResumedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_ExecutionResumed); ok {
		return x.ExecutionResumed
	}
	return nil
}

func (x *HistoryEvent) GetEntityOperationSignaled() *EntityOperationSignaledEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityOperationSignaled); ok {
		return x.EntityOperationSignaled
	}
	return nil
}

func (x *HistoryEvent) GetEntityOperationCalled() *EntityOperationCalledEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityOperationCalled); ok {
		return x.EntityOperationCalled
	}
	return nil
}

func (x *HistoryEvent) GetEntityOperationCompleted() *EntityOperationCompletedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityOperationCompleted); ok {
		return x.EntityOperationCompleted
	}
	return nil
}

func (x *HistoryEvent) GetEntityOperationFailed() *EntityOperationFailedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityOperationFailed); ok {
		return x.EntityOperationFailed
	}
	return nil
}

func (x *HistoryEvent) GetEntityLockRequested() *EntityLockRequestedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityLockRequested); ok {
		return x.EntityLockRequested
	}
	return nil
}

func (x *HistoryEvent) GetEntityLockGranted() *EntityLockGrantedEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityLockGranted); ok {
		return x.EntityLockGranted
	}
	return nil
}

func (x *HistoryEvent) GetEntityUnlockSent() *EntityUnlockSentEvent {
	if x, ok := x.GetEventType().(*HistoryEvent_EntityUnlockSent); ok {
		return x.EntityUnlockSent
	}
	return nil
}

type isHistoryEvent_EventType interface {
	isHistoryEvent_EventType()
}

type HistoryEvent_ExecutionStarted struct {
	ExecutionStarted *ExecutionStartedEvent `protobuf:"bytes,3,opt,name=executionStarted,proto3,oneof"`
}

type HistoryEvent_ExecutionCompleted struct {
	ExecutionCompleted *ExecutionCompletedEvent `protobuf:"bytes,4,opt,name=executionCompleted,proto3,oneof"`
}

type HistoryEvent_ExecutionTerminated struct {
	ExecutionTerminated *ExecutionTerminatedEvent `protobuf:"bytes,5,opt,name=executionTerminated,proto3,oneof"`
}

type HistoryEvent_TaskScheduled struct {
	TaskScheduled *TaskScheduledEvent `protobuf:"bytes,6,opt,name=taskScheduled,proto3,oneof"`
}

type HistoryEvent_TaskCompleted struct {
	TaskCompleted *TaskCompletedEvent `protobuf:"bytes,7,opt,name=taskCompleted,proto3,oneof"`
}

type HistoryEvent_TaskFailed struct {
	TaskFailed *TaskFailedEvent `protobuf:"bytes,8,opt,name=taskFailed,proto3,oneof"`
}

type HistoryEvent_SubOrchestrationInstanceCreated struct {
	SubOrchestrationInstanceCreated *SubOrchestrationInstanceCreatedEvent `protobuf:"bytes,9,opt,name=subOrchestrationInstanceCreated,proto3,oneof"`
}

type HistoryEvent_SubOrchestrationInstanceCompleted struct {
	SubOrchestrationInstanceCompleted *SubOrchestrationInstanceCompletedEvent `protobuf:"bytes,10,opt,name=subOrchestrationInstanceCompleted,proto3,oneof"`
}

type HistoryEvent_SubOrchestrationInstanceFailed struct {
	SubOrchestrationInstanceFailed *SubOrchestrationInstanceFailedEvent `protobuf:"bytes,11,opt,name=subOrchestrationInstanceFailed,proto3,oneof"`
}

type HistoryEvent_TimerCreated struct {
	TimerCreated *TimerCreatedEvent `protobuf:"bytes,12,opt,name=timerCreated,proto3,oneof"`
}

type HistoryEvent_TimerFired struct {
	TimerFired *TimerFiredEvent `protobuf:"bytes,13,opt,name=timerFired,proto3,oneof"`
}

type HistoryEvent_OrchestratorStarted struct {
	OrchestratorStarted *OrchestratorStartedEvent `protobuf:"bytes,14,opt,name=orchestratorStarted,proto3,oneof"`
}

type HistoryEvent_OrchestratorCompleted struct {
	OrchestratorCompleted *OrchestratorCompletedEvent `protobuf:"bytes,15,opt,name=orchestratorCompleted,proto3,oneof"`
}

type HistoryEvent_EventSent struct {
	EventSent *EventSentEvent `protobuf:"bytes,16,opt,name=eventSent,proto3,oneof"`
}

type HistoryEvent_EventRaised struct {
	EventRaised *EventRaisedEvent `protobuf:"bytes,17,opt,name=eventRaised,proto3,oneof"`
}

type HistoryEvent_GenericEvent struct {
	GenericEvent *GenericEvent `protobuf:"bytes,18,opt,name=genericEvent,proto3,oneof"`
}

type HistoryEvent_HistoryState struct {
	HistoryState *HistoryStateEvent `protobuf:"bytes,19,opt,name=historyState,proto3,oneof"`
}

type HistoryEvent_ContinueAsNew struct {
	ContinueAsNew *ContinueAsNewEvent `protobuf:"bytes,20,opt,name=continueAsNew,proto3,oneof"`
}

type HistoryEvent_ExecutionSuspended struct {
	ExecutionSuspended *ExecutionSuspendedEvent `protobuf:"bytes,21,opt,name=executionSuspended,proto3,oneof"`
}

type HistoryEvent_ExecutionResumed struct {
	ExecutionResumed *ExecutionResumedEvent `protobuf:"bytes,22,opt,name=executionResumed,proto3,oneof"`
}

type HistoryEvent_EntityOperationSignaled struct {
	EntityOperationSignaled *EntityOperationSignaledEvent `protobuf:"bytes,23,opt,name=entityOperationSignaled,proto3,oneof"`
}

type HistoryEvent_EntityOperationCalled struct {
	EntityOperationCalled *EntityOperationCalledEvent `protobuf:"bytes,24,opt,name=entityOperationCalled,proto3,oneof"`
}

type HistoryEvent_EntityOperationCompleted struct {
	EntityOperationCompleted *EntityOperationCompletedEvent `protobuf:"bytes,25,opt,name=entityOperationCompleted,proto3,oneof"`
}

type HistoryEvent_EntityOperationFailed struct {
	EntityOperationFailed *EntityOperationFailedEvent `protobuf:"bytes,26,opt,name=entityOperationFailed,proto3,oneof"`
}

type HistoryEvent_EntityLockRequested struct {
	EntityLockRequested *EntityLockRequestedEvent `protobuf:"bytes,27,opt,name=entityLockRequested,proto3,oneof"`
}

type HistoryEvent_EntityLockGranted struct {
	EntityLockGranted *EntityLockGrantedEvent `protobuf:"bytes,28,opt,name=entityLockGranted,proto3,oneof"`
}

type HistoryEvent_EntityUnlockSent struct {
	EntityUnlockSent *EntityUnlockSentEvent `protobuf:"bytes,29,opt,name=entityUnlockSent,proto3,oneof"`
}

func (*HistoryEvent_ExecutionStarted) isHistoryEvent_EventType() {}

func (*HistoryEvent_ExecutionCompleted) isHistoryEvent_EventType() {}

func (*HistoryEvent_ExecutionTerminated) isHistoryEvent_EventType() {}

func (*HistoryEvent_TaskScheduled) isHistoryEvent_EventType() {}

func (*HistoryEvent_TaskCompleted) isHistoryEvent_EventType() {}

func (*HistoryEvent_TaskFailed) isHistoryEvent_EventType() {}

func (*HistoryEvent_SubOrchestrationInstanceCreated) isHistoryEvent_EventType() {}

func (*HistoryEvent_SubOrchestrationInstanceCompleted) isHistoryEvent_EventType() {}

func (*HistoryEvent_SubOrchestrationInstanceFailed) isHistoryEvent_EventType() {}

func (*HistoryEvent_TimerCreated) isHistoryEvent_EventType() {}

func (*HistoryEvent_TimerFired) isHistoryEvent_EventType() {}

func (*HistoryEvent_OrchestratorStarted) isHistoryEvent_EventType() {}

func (*HistoryEvent_OrchestratorCompleted) isHistoryEvent_EventType() {}

func (*HistoryEvent_EventSent) isHistoryEvent_EventType() {}

func (*HistoryEvent_EventRaised) isHistoryEvent_EventType() {}

func (*HistoryEvent_GenericEvent) isHistoryEvent_EventType() {}

func (*HistoryEvent_HistoryState) isHistoryEvent_EventType() {}

func (*HistoryEvent_ContinueAsNew) isHistoryEvent_EventType() {}

func (*HistoryEvent_ExecutionSuspended) isHistoryEvent_EventType() {}

func (*HistoryEvent_ExecutionResumed) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityOperationSignaled) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityOperationCalled) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityOperationCompleted) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityOperationFailed) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityLockRequested) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityLockGranted) isHistoryEvent_EventType() {}

func (*HistoryEvent_EntityUnlockSent) isHistoryEvent_EventType() {}

type ScheduleTaskAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Input   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ScheduleTaskAction) Reset() {
	*x = ScheduleTaskAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTaskAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskAction) ProtoMessage() {}

func (x *ScheduleTaskAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskAction.ProtoReflect.Descriptor instead.
func (*ScheduleTaskAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{34}
}

func (x *ScheduleTaskAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleTaskAction) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ScheduleTaskAction) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateSubOrchestrationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name       string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Input      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *CreateSubOrchestrationAction) Reset() {
	*x = CreateSubOrchestrationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubOrchestrationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubOrchestrationAction) ProtoMessage() {}

func (x *CreateSubOrchestrationAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubOrchestrationAction.ProtoReflect.Descriptor instead.
func (*CreateSubOrchestrationAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{35}
}

func (x *CreateSubOrchestrationAction) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateSubOrchestrationAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSubOrchestrationAction) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CreateSubOrchestrationAction) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateTimerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=fireAt,proto3" json:"fireAt,omitempty"`
	Name   *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *CreateTimerAction) Reset() {
	*x = CreateTimerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTimerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTimerAction) ProtoMessage() {}

func (x *CreateTimerAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTimerAction.ProtoReflect.Descriptor instead.
func (*CreateTimerAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{36}
}

func (x *CreateTimerAction) GetFireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FireAt
	}
	return nil
}

func (x *CreateTimerAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SendEventAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *OrchestrationInstance  `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Name     string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendEventAction) Reset() {
	*x = SendEventAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventAction) ProtoMessage() {}

func (x *SendEventAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventAction.ProtoReflect.Descriptor instead.
func (*SendEventAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{37}
}

func (x *SendEventAction) GetInstance() *OrchestrationInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *SendEventAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SendEventAction) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type CompleteOrchestrationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrchestrationStatus OrchestrationStatus     `protobuf:"varint,1,opt,name=orchestrationStatus,proto3,enum=OrchestrationStatus" json:"orchestrationStatus,omitempty"`
	Result              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Details             *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	NewVersion          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=newVersion,proto3" json:"newVersion,omitempty"`
	CarryoverEvents     []*HistoryEvent         `protobuf:"bytes,5,rep,name=carryoverEvents,proto3" json:"carryoverEvents,omitempty"`
	FailureDetails      *TaskFailureDetails     `protobuf:"bytes,6,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
}

func (x *CompleteOrchestrationAction) Reset() {
	*x = CompleteOrchestrationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteOrchestrationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteOrchestrationAction) ProtoMessage() {}

func (x *CompleteOrchestrationAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteOrchestrationAction.ProtoReflect.Descriptor instead.
func (*CompleteOrchestrationAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{38}
}

func (x *CompleteOrchestrationAction) GetOrchestrationStatus() OrchestrationStatus {
	if x != nil {
		return x.OrchestrationStatus
	}
	return OrchestrationStatus_ORCHESTRATION_STATUS_RUNNING
}

func (x *CompleteOrchestrationAction) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CompleteOrchestrationAction) GetDetails() *wrapperspb.StringValue {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CompleteOrchestrationAction) GetNewVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NewVersion
	}
	return nil
}

func (x *CompleteOrchestrationAction) GetCarryoverEvents() []*HistoryEvent {
	if x != nil {
		return x.CarryoverEvents
	}
	return nil
}

func (x *CompleteOrchestrationAction) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type TerminateOrchestrationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Reason     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Recurse    bool                    `protobuf:"varint,3,opt,name=recurse,proto3" json:"recurse,omitempty"`
}

func (x *TerminateOrchestrationAction) Reset() {
	*x = TerminateOrchestrationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateOrchestrationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateOrchestrationAction) ProtoMessage() {}

func (x *TerminateOrchestrationAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateOrchestrationAction.ProtoReflect.Descriptor instead.
func (*TerminateOrchestrationAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{39}
}

func (x *TerminateOrchestrationAction) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TerminateOrchestrationAction) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *TerminateOrchestrationAction) GetRecurse() bool {
	if x != nil {
		return x.Recurse
	}
	return false
}

type SendEntityMessageAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EntityMessageType:
	//
	//	*SendEntityMessageAction_EntityOperationSignaled
	//	*SendEntityMessageAction_EntityOperationCalled
	//	*SendEntityMessageAction_EntityLockRequested
	//	*SendEntityMessageAction_EntityUnlockSent
	EntityMessageType isSendEntityMessageAction_EntityMessageType `protobuf_oneof:"EntityMessageType"`
}

func (x *SendEntityMessageAction) Reset() {
	*x = SendEntityMessageAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEntityMessageAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEntityMessageAction) ProtoMessage() {}

func (x *SendEntityMessageAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEntityMessageAction.ProtoReflect.Descriptor instead.
func (*SendEntityMessageAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{40}
}

func (m *SendEntityMessageAction) GetEntityMessageType() isSendEntityMessageAction_EntityMessageType {
	if m != nil {
		return m.EntityMessageType
	}
	return nil
}

func (x *SendEntityMessageAction) GetEntityOperationSignaled() *EntityOperationSignaledEvent {
	if x, ok := x.GetEntityMessageType().(*SendEntityMessageAction_EntityOperationSignaled); ok {
		return x.EntityOperationSignaled
	}
	return nil
}

func (x *SendEntityMessageAction) GetEntityOperationCalled() *EntityOperationCalledEvent {
	if x, ok := x.GetEntityMessageType().(*SendEntityMessageAction_EntityOperationCalled); ok {
		return x.EntityOperationCalled
	}
	return nil
}

func (x *SendEntityMessageAction) GetEntityLockRequested() *EntityLockRequestedEvent {
	if x, ok := x.GetEntityMessageType().(*SendEntityMessageAction_EntityLockRequested); ok {
		return x.EntityLockRequested
	}
	return nil
}

func (x *SendEntityMessageAction) GetEntityUnlockSent() *EntityUnlockSentEvent {
	if x, ok := x.GetEntityMessageType().(*SendEntityMessageAction_EntityUnlockSent); ok {
		return x.EntityUnlockSent
	}
	return nil
}

type isSendEntityMessageAction_EntityMessageType interface {
	isSendEntityMessageAction_EntityMessageType()
}

type SendEntityMessageAction_EntityOperationSignaled struct {
	EntityOperationSignaled *EntityOperationSignaledEvent `protobuf:"bytes,1,opt,name=entityOperationSignaled,proto3,oneof"`
}

type SendEntityMessageAction_EntityOperationCalled struct {
	EntityOperationCalled *EntityOperationCalledEvent `protobuf:"bytes,2,opt,name=entityOperationCalled,proto3,oneof"`
}

type SendEntityMessageAction_EntityLockRequested struct {
	EntityLockRequested *EntityLockRequestedEvent `protobuf:"bytes,3,opt,name=entityLockRequested,proto3,oneof"`
}

type SendEntityMessageAction_EntityUnlockSent struct {
	EntityUnlockSent *EntityUnlockSentEvent `protobuf:"bytes,4,opt,name=entityUnlockSent,proto3,oneof"`
}

func (*SendEntityMessageAction_EntityOperationSignaled) isSendEntityMessageAction_EntityMessageType() {
}

func (*SendEntityMessageAction_EntityOperationCalled) isSendEntityMessageAction_EntityMessageType() {}

func (*SendEntityMessageAction_EntityLockRequested) isSendEntityMessageAction_EntityMessageType() {}

func (*SendEntityMessageAction_EntityUnlockSent) isSendEntityMessageAction_EntityMessageType() {}

type OrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to OrchestratorActionType:
	//
	//	*OrchestratorAction_ScheduleTask
	//	*OrchestratorAction_CreateSubOrchestration
	//	*OrchestratorAction_CreateTimer
	//	*OrchestratorAction_SendEvent
	//	*OrchestratorAction_CompleteOrchestration
	//	*OrchestratorAction_TerminateOrchestration
	//	*OrchestratorAction_SendEntityMessage
	OrchestratorActionType isOrchestratorAction_OrchestratorActionType `protobuf_oneof:"orchestratorActionType"`
}

func (x *OrchestratorAction) Reset() {
	*x = OrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorAction) ProtoMessage() {}

func (x *OrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorAction.ProtoReflect.Descriptor instead.
func (*OrchestratorAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{41}
}

func (x *OrchestratorAction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *OrchestratorAction) GetOrchestratorActionType() isOrchestratorAction_OrchestratorActionType {
	if m != nil {
		return m.OrchestratorActionType
	}
	return nil
}

func (x *OrchestratorAction) GetScheduleTask() *ScheduleTaskAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_ScheduleTask); ok {
		return x.ScheduleTask
	}
	return nil
}

func (x *OrchestratorAction) GetCreateSubOrchestration() *CreateSubOrchestrationAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_CreateSubOrchestration); ok {
		return x.CreateSubOrchestration
	}
	return nil
}

func (x *OrchestratorAction) GetCreateTimer() *CreateTimerAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_CreateTimer); ok {
		return x.CreateTimer
	}
	return nil
}

func (x *OrchestratorAction) GetSendEvent() *SendEventAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_SendEvent); ok {
		return x.SendEvent
	}
	return nil
}

func (x *OrchestratorAction) GetCompleteOrchestration() *CompleteOrchestrationAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_CompleteOrchestration); ok {
		return x.CompleteOrchestration
	}
	return nil
}

func (x *OrchestratorAction) GetTerminateOrchestration() *TerminateOrchestrationAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_TerminateOrchestration); ok {
		return x.TerminateOrchestration
	}
	return nil
}

func (x *OrchestratorAction) GetSendEntityMessage() *SendEntityMessageAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_SendEntityMessage); ok {
		return x.SendEntityMessage
	}
	return nil
}

type isOrchestratorAction_OrchestratorActionType interface {
	isOrchestratorAction_OrchestratorActionType()
}

type OrchestratorAction_ScheduleTask struct {
	ScheduleTask *ScheduleTaskAction `protobuf:"bytes,2,opt,name=scheduleTask,proto3,oneof"`
}

type OrchestratorAction_CreateSubOrchestration struct {
	CreateSubOrchestration *CreateSubOrchestrationAction `protobuf:"bytes,3,opt,name=createSubOrchestration,proto3,oneof"`
}

type OrchestratorAction_CreateTimer struct {
	CreateTimer *CreateTimerAction `protobuf:"bytes,4,opt,name=createTimer,proto3,oneof"`
}

type OrchestratorAction_SendEvent struct {
	SendEvent *SendEventAction `protobuf:"bytes,5,opt,name=sendEvent,proto3,oneof"`
}

type OrchestratorAction_CompleteOrchestration struct {
	CompleteOrchestration *CompleteOrchestrationAction `protobuf:"bytes,6,opt,name=completeOrchestration,proto3,oneof"`
}

type OrchestratorAction_TerminateOrchestration struct {
	TerminateOrchestration *TerminateOrchestrationAction `protobuf:"bytes,7,opt,name=terminateOrchestration,proto3,oneof"`
}

type OrchestratorAction_SendEntityMessage struct {
	SendEntityMessage *SendEntityMessageAction `protobuf:"bytes,8,opt,name=sendEntityMessage,proto3,oneof"`
}

func (*OrchestratorAction_ScheduleTask) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_CreateSubOrchestration) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_CreateTimer) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_SendEvent) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_CompleteOrchestration) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_TerminateOrchestration) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_SendEntityMessage) isOrchestratorAction_OrchestratorActionType() {}

type OrchestratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId               string                        `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ExecutionId              *wrapperspb.StringValue       `protobuf:"bytes,2,opt,name=executionId,proto3" json:"executionId,omitempty"`
	PastEvents               []*HistoryEvent               `protobuf:"bytes,3,rep,name=pastEvents,proto3" json:"pastEvents,omitempty"`
	NewEvents                []*HistoryEvent               `protobuf:"bytes,4,rep,name=newEvents,proto3" json:"newEvents,omitempty"`
	EntityParameters         *OrchestratorEntityParameters `protobuf:"bytes,5,opt,name=entityParameters,proto3" json:"entityParameters,omitempty"`
	RequiresHistoryStreaming bool                          `protobuf:"varint,6,opt,name=requiresHistoryStreaming,proto3" json:"requiresHistoryStreaming,omitempty"`
}

func (x *OrchestratorRequest) Reset() {
	*x = OrchestratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorRequest) ProtoMessage() {}

func (x *OrchestratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorRequest.ProtoReflect.Descriptor instead.
func (*OrchestratorRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{42}
}

func (x *OrchestratorRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OrchestratorRequest) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

func (x *OrchestratorRequest) GetPastEvents() []*HistoryEvent {
	if x != nil {
		return x.PastEvents
	}
	return nil
}

func (x *OrchestratorRequest) GetNewEvents() []*HistoryEvent {
	if x != nil {
		return x.NewEvents
	}
	return nil
}

func (x *OrchestratorRequest) GetEntityParameters() *OrchestratorEntityParameters {
	if x != nil {
		return x.EntityParameters
	}
	return nil
}

func (x *OrchestratorRequest) GetRequiresHistoryStreaming() bool {
	if x != nil {
		return x.RequiresHistoryStreaming
	}
	return false
}

type OrchestratorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId      string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Actions         []*OrchestratorAction   `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	CustomStatus    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=customStatus,proto3" json:"customStatus,omitempty"`
	CompletionToken string                  `protobuf:"bytes,4,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
	// The number of work item events that were processed by the orchestrator.
	// This field is optional. If not set, the service should assume that the orchestrator processed all events.
	NumEventsProcessed *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=numEventsProcessed,proto3" json:"numEventsProcessed,omitempty"`
}

func (x *OrchestratorResponse) Reset() {
	*x = OrchestratorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorResponse) ProtoMessage() {}

func (x *OrchestratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorResponse.ProtoReflect.Descriptor instead.
func (*OrchestratorResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{43}
}

func (x *OrchestratorResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OrchestratorResponse) GetActions() []*OrchestratorAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *OrchestratorResponse) GetCustomStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomStatus
	}
	return nil
}

func (x *OrchestratorResponse) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *OrchestratorResponse) GetNumEventsProcessed() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumEventsProcessed
	}
	return nil
}

type CreateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId                 string                      `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name                       string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version                    *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Input                      *wrapperspb.StringValue     `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledStartTimestamp    *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=scheduledStartTimestamp,proto3" json:"scheduledStartTimestamp,omitempty"`
	OrchestrationIdReusePolicy *OrchestrationIdReusePolicy `protobuf:"bytes,6,opt,name=orchestrationIdReusePolicy,proto3" json:"orchestrationIdReusePolicy,omitempty"`
	ExecutionId                *wrapperspb.StringValue     `protobuf:"bytes,7,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Tags                       map[string]string           `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ParentTraceContext         *TraceContext               `protobuf:"bytes,9,opt,name=parentTraceContext,proto3" json:"parentTraceContext,omitempty"`
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{44}
}

func (x *CreateInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstanceRequest) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CreateInstanceRequest) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateInstanceRequest) GetScheduledStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTimestamp
	}
	return nil
}

func (x *CreateInstanceRequest) GetOrchestrationIdReusePolicy() *OrchestrationIdReusePolicy {
	if x != nil {
		return x.OrchestrationIdReusePolicy
	}
	return nil
}

func (x *CreateInstanceRequest) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

func (x *CreateInstanceRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateInstanceRequest) GetParentTraceContext() *TraceContext {
	if x != nil {
		return x.ParentTraceContext
	}
	return nil
}

type OrchestrationIdReusePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationStatus []OrchestrationStatus     `protobuf:"varint,1,rep,packed,name=operationStatus,proto3,enum=OrchestrationStatus" json:"operationStatus,omitempty"`
	Action          CreateOrchestrationAction `protobuf:"varint,2,opt,name=action,proto3,enum=CreateOrchestrationAction" json:"action,omitempty"`
}

func (x *OrchestrationIdReusePolicy) Reset() {
	*x = OrchestrationIdReusePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestrationIdReusePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestrationIdReusePolicy) ProtoMessage() {}

func (x *OrchestrationIdReusePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestrationIdReusePolicy.ProtoReflect.Descriptor instead.
func (*OrchestrationIdReusePolicy) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{45}
}

func (x *OrchestrationIdReusePolicy) GetOperationStatus() []OrchestrationStatus {
	if x != nil {
		return x.OperationStatus
	}
	return nil
}

func (x *OrchestrationIdReusePolicy) GetAction() CreateOrchestrationAction {
	if x != nil {
		return x.Action
	}
	return CreateOrchestrationAction_ERROR
}

type CreateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *CreateInstanceResponse) Reset() {
	*x = CreateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceResponse) ProtoMessage() {}

func (x *CreateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{46}
}

func (x *CreateInstanceResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId          string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	GetInputsAndOutputs bool   `protobuf:"varint,2,opt,name=getInputsAndOutputs,proto3" json:"getInputsAndOutputs,omitempty"`
}

func (x *GetInstanceRequest) Reset() {
	*x = GetInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceRequest) ProtoMessage() {}

func (x *GetInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetInstanceRequest) GetGetInputsAndOutputs() bool {
	if x != nil {
		return x.GetInputsAndOutputs
	}
	return false
}

type GetInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists             bool                `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	OrchestrationState *OrchestrationState `protobuf:"bytes,2,opt,name=orchestrationState,proto3" json:"orchestrationState,omitempty"`
}

func (x *GetInstanceResponse) Reset() {
	*x = GetInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceResponse) ProtoMessage() {}

func (x *GetInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{48}
}

func (x *GetInstanceResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetInstanceResponse) GetOrchestrationState() *OrchestrationState {
	if x != nil {
		return x.OrchestrationState
	}
	return nil
}

type RewindInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Reason     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RewindInstanceRequest) Reset() {
	*x = RewindInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewindInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewindInstanceRequest) ProtoMessage() {}

func (x *RewindInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewindInstanceRequest.ProtoReflect.Descriptor instead.
func (*RewindInstanceRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{49}
}

func (x *RewindInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RewindInstanceRequest) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type RewindInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RewindInstanceResponse) Reset() {
	*x = RewindInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewindInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewindInstanceResponse) ProtoMessage() {}

func (x *RewindInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewindInstanceResponse.ProtoReflect.Descriptor instead.
func (*RewindInstanceResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{50}
}

type OrchestrationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId              string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name                    string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version                 *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	OrchestrationStatus     OrchestrationStatus     `protobuf:"varint,4,opt,name=orchestrationStatus,proto3,enum=OrchestrationStatus" json:"orchestrationStatus,omitempty"`
	ScheduledStartTimestamp *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=scheduledStartTimestamp,proto3" json:"scheduledStartTimestamp,omitempty"`
	CreatedTimestamp        *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=createdTimestamp,proto3" json:"createdTimestamp,omitempty"`
	LastUpdatedTimestamp    *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=lastUpdatedTimestamp,proto3" json:"lastUpdatedTimestamp,omitempty"`
	Input                   *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Output                  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	CustomStatus            *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=customStatus,proto3" json:"customStatus,omitempty"`
	FailureDetails          *TaskFailureDetails     `protobuf:"bytes,11,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
	ExecutionId             *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=executionId,proto3" json:"executionId,omitempty"`
	CompletedTimestamp      *timestamppb.Timestamp  `protobuf:"bytes,13,opt,name=completedTimestamp,proto3" json:"completedTimestamp,omitempty"`
	ParentInstanceId        *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=parentInstanceId,proto3" json:"parentInstanceId,omitempty"`
	Tags                    map[string]string       `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OrchestrationState) Reset() {
	*x = OrchestrationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestrationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestrationState) ProtoMessage() {}

func (x *OrchestrationState) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestrationState.ProtoReflect.Descriptor instead.
func (*OrchestrationState) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{51}
}

func (x *OrchestrationState) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OrchestrationState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrchestrationState) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *OrchestrationState) GetOrchestrationStatus() OrchestrationStatus {
	if x != nil {
		return x.OrchestrationStatus
	}
	return OrchestrationStatus_ORCHESTRATION_STATUS_RUNNING
}

func (x *OrchestrationState) GetScheduledStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTimestamp
	}
	return nil
}

func (x *OrchestrationState) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *OrchestrationState) GetLastUpdatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTimestamp
	}
	return nil
}

func (x *OrchestrationState) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *OrchestrationState) GetOutput() *wrapperspb.StringValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *OrchestrationState) GetCustomStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomStatus
	}
	return nil
}

func (x *OrchestrationState) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

func (x *OrchestrationState) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

func (x *OrchestrationState) GetCompletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTimestamp
	}
	return nil
}

func (x *OrchestrationState) GetParentInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentInstanceId
	}
	return nil
}

func (x *OrchestrationState) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RaiseEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name       string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *RaiseEventRequest) Reset() {
	*x = RaiseEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaiseEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaiseEventRequest) ProtoMessage() {}

func (x *RaiseEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaiseEventRequest.ProtoReflect.Descriptor instead.
func (*RaiseEventRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{52}
}

func (x *RaiseEventRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RaiseEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaiseEventRequest) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type RaiseEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RaiseEventResponse) Reset() {
	*x = RaiseEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaiseEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaiseEventResponse) ProtoMessage() {}

func (x *RaiseEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaiseEventResponse.ProtoReflect.Descriptor instead.
func (*RaiseEventResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{53}
}

type TerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Output     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Recursive  bool                    `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *TerminateRequest) Reset() {
	*x = TerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest) ProtoMessage() {}

func (x *TerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest.ProtoReflect.Descriptor instead.
func (*TerminateRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{54}
}

func (x *TerminateRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TerminateRequest) GetOutput() *wrapperspb.StringValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TerminateRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type TerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateResponse) Reset() {
	*x = TerminateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResponse) ProtoMessage() {}

func (x *TerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResponse.ProtoReflect.Descriptor instead.
func (*TerminateResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{55}
}

type SuspendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Reason     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SuspendRequest) Reset() {
	*x = SuspendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendRequest) ProtoMessage() {}

func (x *SuspendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendRequest.ProtoReflect.Descriptor instead.
func (*SuspendRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{56}
}

func (x *SuspendRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SuspendRequest) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type SuspendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SuspendResponse) Reset() {
	*x = SuspendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendResponse) ProtoMessage() {}

func (x *SuspendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendResponse.ProtoReflect.Descriptor instead.
func (*SuspendResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{57}
}

type ResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Reason     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ResumeRequest) Reset() {
	*x = ResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRequest) ProtoMessage() {}

func (x *ResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRequest.ProtoReflect.Descriptor instead.
func (*ResumeRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{58}
}

func (x *ResumeRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ResumeRequest) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

type ResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResumeResponse) Reset() {
	*x = ResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeResponse) ProtoMessage() {}

func (x *ResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeResponse.ProtoReflect.Descriptor instead.
func (*ResumeResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{59}
}

type QueryInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *InstanceQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *QueryInstancesRequest) Reset() {
	*x = QueryInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstancesRequest) ProtoMessage() {}

func (x *QueryInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstancesRequest.ProtoReflect.Descriptor instead.
func (*QueryInstancesRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{60}
}

func (x *QueryInstancesRequest) GetQuery() *InstanceQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type InstanceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeStatus         []OrchestrationStatus     `protobuf:"varint,1,rep,packed,name=runtimeStatus,proto3,enum=OrchestrationStatus" json:"runtimeStatus,omitempty"`
	CreatedTimeFrom       *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=createdTimeFrom,proto3" json:"createdTimeFrom,omitempty"`
	CreatedTimeTo         *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=createdTimeTo,proto3" json:"createdTimeTo,omitempty"`
	TaskHubNames          []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=taskHubNames,proto3" json:"taskHubNames,omitempty"`
	MaxInstanceCount      int32                     `protobuf:"varint,5,opt,name=maxInstanceCount,proto3" json:"maxInstanceCount,omitempty"`
	ContinuationToken     *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	InstanceIdPrefix      *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=instanceIdPrefix,proto3" json:"instanceIdPrefix,omitempty"`
	FetchInputsAndOutputs bool                      `protobuf:"varint,8,opt,name=fetchInputsAndOutputs,proto3" json:"fetchInputsAndOutputs,omitempty"`
}

func (x *InstanceQuery) Reset() {
	*x = InstanceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceQuery) ProtoMessage() {}

func (x *InstanceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceQuery.ProtoReflect.Descriptor instead.
func (*InstanceQuery) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{61}
}

func (x *InstanceQuery) GetRuntimeStatus() []OrchestrationStatus {
	if x != nil {
		return x.RuntimeStatus
	}
	return nil
}

func (x *InstanceQuery) GetCreatedTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimeFrom
	}
	return nil
}

func (x *InstanceQuery) GetCreatedTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimeTo
	}
	return nil
}

func (x *InstanceQuery) GetTaskHubNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.TaskHubNames
	}
	return nil
}

func (x *InstanceQuery) GetMaxInstanceCount() int32 {
	if x != nil {
		return x.MaxInstanceCount
	}
	return 0
}

func (x *InstanceQuery) GetContinuationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *InstanceQuery) GetInstanceIdPrefix() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceIdPrefix
	}
	return nil
}

func (x *InstanceQuery) GetFetchInputsAndOutputs() bool {
	if x != nil {
		return x.FetchInputsAndOutputs
	}
	return false
}

type QueryInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrchestrationState []*OrchestrationState   `protobuf:"bytes,1,rep,name=orchestrationState,proto3" json:"orchestrationState,omitempty"`
	ContinuationToken  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *QueryInstancesResponse) Reset() {
	*x = QueryInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstancesResponse) ProtoMessage() {}

func (x *QueryInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstancesResponse.ProtoReflect.Descriptor instead.
func (*QueryInstancesResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{62}
}

func (x *QueryInstancesResponse) GetOrchestrationState() []*OrchestrationState {
	if x != nil {
		return x.OrchestrationState
	}
	return nil
}

func (x *QueryInstancesResponse) GetContinuationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type PurgeInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*PurgeInstancesRequest_InstanceId
	//	*PurgeInstancesRequest_PurgeInstanceFilter
	Request   isPurgeInstancesRequest_Request `protobuf_oneof:"request"`
	Recursive bool                            `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *PurgeInstancesRequest) Reset() {
	*x = PurgeInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeInstancesRequest) ProtoMessage() {}

func (x *PurgeInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeInstancesRequest.ProtoReflect.Descriptor instead.
func (*PurgeInstancesRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{63}
}

func (m *PurgeInstancesRequest) GetRequest() isPurgeInstancesRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *PurgeInstancesRequest) GetInstanceId() string {
	if x, ok := x.GetRequest().(*PurgeInstancesRequest_InstanceId); ok {
		return x.InstanceId
	}
	return ""
}

func (x *PurgeInstancesRequest) GetPurgeInstanceFilter() *PurgeInstanceFilter {
	if x, ok := x.GetRequest().(*PurgeInstancesRequest_PurgeInstanceFilter); ok {
		return x.PurgeInstanceFilter
	}
	return nil
}

func (x *PurgeInstancesRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type isPurgeInstancesRequest_Request interface {
	isPurgeInstancesRequest_Request()
}

type PurgeInstancesRequest_InstanceId struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3,oneof"`
}

type PurgeInstancesRequest_PurgeInstanceFilter struct {
	PurgeInstanceFilter *PurgeInstanceFilter `protobuf:"bytes,2,opt,name=purgeInstanceFilter,proto3,oneof"`
}

func (*PurgeInstancesRequest_InstanceId) isPurgeInstancesRequest_Request() {}

func (*PurgeInstancesRequest_PurgeInstanceFilter) isPurgeInstancesRequest_Request() {}

type PurgeInstanceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=createdTimeFrom,proto3" json:"createdTimeFrom,omitempty"`
	CreatedTimeTo   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdTimeTo,proto3" json:"createdTimeTo,omitempty"`
	RuntimeStatus   []OrchestrationStatus  `protobuf:"varint,3,rep,packed,name=runtimeStatus,proto3,enum=OrchestrationStatus" json:"runtimeStatus,omitempty"`
}

func (x *PurgeInstanceFilter) Reset() {
	*x = PurgeInstanceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeInstanceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeInstanceFilter) ProtoMessage() {}

func (x *PurgeInstanceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeInstanceFilter.ProtoReflect.Descriptor instead.
func (*PurgeInstanceFilter) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{64}
}

func (x *PurgeInstanceFilter) GetCreatedTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimeFrom
	}
	return nil
}

func (x *PurgeInstanceFilter) GetCreatedTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimeTo
	}
	return nil
}

func (x *PurgeInstanceFilter) GetRuntimeStatus() []OrchestrationStatus {
	if x != nil {
		return x.RuntimeStatus
	}
	return nil
}

type PurgeInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedInstanceCount int32                 `protobuf:"varint,1,opt,name=deletedInstanceCount,proto3" json:"deletedInstanceCount,omitempty"`
	IsComplete           *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=isComplete,proto3" json:"isComplete,omitempty"`
}

func (x *PurgeInstancesResponse) Reset() {
	*x = PurgeInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeInstancesResponse) ProtoMessage() {}

func (x *PurgeInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeInstancesResponse.ProtoReflect.Descriptor instead.
func (*PurgeInstancesResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{65}
}

func (x *PurgeInstancesResponse) GetDeletedInstanceCount() int32 {
	if x != nil {
		return x.DeletedInstanceCount
	}
	return 0
}

func (x *PurgeInstancesResponse) GetIsComplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsComplete
	}
	return nil
}

type CreateTaskHubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecreateIfExists bool `protobuf:"varint,1,opt,name=recreateIfExists,proto3" json:"recreateIfExists,omitempty"`
}

func (x *CreateTaskHubRequest) Reset() {
	*x = CreateTaskHubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskHubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskHubRequest) ProtoMessage() {}

func (x *CreateTaskHubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskHubRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskHubRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{66}
}

func (x *CreateTaskHubRequest) GetRecreateIfExists() bool {
	if x != nil {
		return x.RecreateIfExists
	}
	return false
}

type CreateTaskHubResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTaskHubResponse) Reset() {
	*x = CreateTaskHubResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskHubResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskHubResponse) ProtoMessage() {}

func (x *CreateTaskHubResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskHubResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskHubResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{67}
}

type DeleteTaskHubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTaskHubRequest) Reset() {
	*x = DeleteTaskHubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskHubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskHubRequest) ProtoMessage() {}

func (x *DeleteTaskHubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskHubRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskHubRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{68}
}

type DeleteTaskHubResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTaskHubResponse) Reset() {
	*x = DeleteTaskHubResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskHubResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskHubResponse) ProtoMessage() {}

func (x *DeleteTaskHubResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskHubResponse.ProtoReflect.Descriptor instead.
func (*DeleteTaskHubResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{69}
}

type SignalEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId    string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	RequestId     string                  `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	ScheduledTime *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
}

func (x *SignalEntityRequest) Reset() {
	*x = SignalEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalEntityRequest) ProtoMessage() {}

func (x *SignalEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalEntityRequest.ProtoReflect.Descriptor instead.
func (*SignalEntityRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{70}
}

func (x *SignalEntityRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SignalEntityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalEntityRequest) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalEntityRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignalEntityRequest) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

type SignalEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalEntityResponse) Reset() {
	*x = SignalEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalEntityResponse) ProtoMessage() {}

func (x *SignalEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalEntityResponse.ProtoReflect.Descriptor instead.
func (*SignalEntityResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{71}
}

type GetEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId   string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	IncludeState bool   `protobuf:"varint,2,opt,name=includeState,proto3" json:"includeState,omitempty"`
}

func (x *GetEntityRequest) Reset() {
	*x = GetEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityRequest) ProtoMessage() {}

func (x *GetEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityRequest.ProtoReflect.Descriptor instead.
func (*GetEntityRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{72}
}

func (x *GetEntityRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetEntityRequest) GetIncludeState() bool {
	if x != nil {
		return x.IncludeState
	}
	return false
}

type GetEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool            `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Entity *EntityMetadata `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *GetEntityResponse) Reset() {
	*x = GetEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityResponse) ProtoMessage() {}

func (x *GetEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityResponse.ProtoReflect.Descriptor instead.
func (*GetEntityResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{73}
}

func (x *GetEntityResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetEntityResponse) GetEntity() *EntityMetadata {
	if x != nil {
		return x.Entity
	}
	return nil
}

type EntityQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdStartsWith *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=instanceIdStartsWith,proto3" json:"instanceIdStartsWith,omitempty"`
	LastModifiedFrom     *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=lastModifiedFrom,proto3" json:"lastModifiedFrom,omitempty"`
	LastModifiedTo       *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=lastModifiedTo,proto3" json:"lastModifiedTo,omitempty"`
	IncludeState         bool                    `protobuf:"varint,4,opt,name=includeState,proto3" json:"includeState,omitempty"`
	IncludeTransient     bool                    `protobuf:"varint,5,opt,name=includeTransient,proto3" json:"includeTransient,omitempty"`
	PageSize             *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ContinuationToken    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *EntityQuery) Reset() {
	*x = EntityQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityQuery) ProtoMessage() {}

func (x *EntityQuery) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityQuery.ProtoReflect.Descriptor instead.
func (*EntityQuery) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{74}
}

func (x *EntityQuery) GetInstanceIdStartsWith() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceIdStartsWith
	}
	return nil
}

func (x *EntityQuery) GetLastModifiedFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedFrom
	}
	return nil
}

func (x *EntityQuery) GetLastModifiedTo() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedTo
	}
	return nil
}

func (x *EntityQuery) GetIncludeState() bool {
	if x != nil {
		return x.IncludeState
	}
	return false
}

func (x *EntityQuery) GetIncludeTransient() bool {
	if x != nil {
		return x.IncludeTransient
	}
	return false
}

func (x *EntityQuery) GetPageSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *EntityQuery) GetContinuationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type QueryEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *EntityQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *QueryEntitiesRequest) Reset() {
	*x = QueryEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEntitiesRequest) ProtoMessage() {}

func (x *QueryEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEntitiesRequest.ProtoReflect.Descriptor instead.
func (*QueryEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{75}
}

func (x *QueryEntitiesRequest) GetQuery() *EntityQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type QueryEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities          []*EntityMetadata       `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	ContinuationToken *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *QueryEntitiesResponse) Reset() {
	*x = QueryEntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEntitiesResponse) ProtoMessage() {}

func (x *QueryEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEntitiesResponse.ProtoReflect.Descriptor instead.
func (*QueryEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{76}
}

func (x *QueryEntitiesResponse) GetEntities() []*EntityMetadata {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *QueryEntitiesResponse) GetContinuationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type EntityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId       string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	LastModifiedTime *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=lastModifiedTime,proto3" json:"lastModifiedTime,omitempty"`
	BacklogQueueSize int32                   `protobuf:"varint,3,opt,name=backlogQueueSize,proto3" json:"backlogQueueSize,omitempty"`
	LockedBy         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=lockedBy,proto3" json:"lockedBy,omitempty"`
	SerializedState  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=serializedState,proto3" json:"serializedState,omitempty"`
}

func (x *EntityMetadata) Reset() {
	*x = EntityMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityMetadata) ProtoMessage() {}

func (x *EntityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityMetadata.ProtoReflect.Descriptor instead.
func (*EntityMetadata) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{77}
}

func (x *EntityMetadata) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EntityMetadata) GetLastModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedTime
	}
	return nil
}

func (x *EntityMetadata) GetBacklogQueueSize() int32 {
	if x != nil {
		return x.BacklogQueueSize
	}
	return 0
}

func (x *EntityMetadata) GetLockedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LockedBy
	}
	return nil
}

func (x *EntityMetadata) GetSerializedState() *wrapperspb.StringValue {
	if x != nil {
		return x.SerializedState
	}
	return nil
}

type CleanEntityStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	RemoveEmptyEntities  bool                    `protobuf:"varint,2,opt,name=removeEmptyEntities,proto3" json:"removeEmptyEntities,omitempty"`
	ReleaseOrphanedLocks bool                    `protobuf:"varint,3,opt,name=releaseOrphanedLocks,proto3" json:"releaseOrphanedLocks,omitempty"`
}

func (x *CleanEntityStorageRequest) Reset() {
	*x = CleanEntityStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanEntityStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanEntityStorageRequest) ProtoMessage() {}

func (x *CleanEntityStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanEntityStorageRequest.ProtoReflect.Descriptor instead.
func (*CleanEntityStorageRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{78}
}

func (x *CleanEntityStorageRequest) GetContinuationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *CleanEntityStorageRequest) GetRemoveEmptyEntities() bool {
	if x != nil {
		return x.RemoveEmptyEntities
	}
	return false
}

func (x *CleanEntityStorageRequest) GetReleaseOrphanedLocks() bool {
	if x != nil {
		return x.ReleaseOrphanedLocks
	}
	return false
}

type CleanEntityStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	EmptyEntitiesRemoved  int32                   `protobuf:"varint,2,opt,name=emptyEntitiesRemoved,proto3" json:"emptyEntitiesRemoved,omitempty"`
	OrphanedLocksReleased int32                   `protobuf:"varint,3,opt,name=orphanedLocksReleased,proto3" json:"orphanedLocksReleased,omitempty"`
}

func (x *CleanEntityStorageResponse) Reset() {
	*x = CleanEntityStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanEntityStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanEntityStorageResponse) ProtoMessage() {}

func (x *CleanEntityStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanEntityStorageResponse.ProtoReflect.Descriptor instead.
func (*CleanEntityStorageResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{79}
}

func (x *CleanEntityStorageResponse) GetContinuationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *CleanEntityStorageResponse) GetEmptyEntitiesRemoved() int32 {
	if x != nil {
		return x.EmptyEntitiesRemoved
	}
	return 0
}

func (x *CleanEntityStorageResponse) GetOrphanedLocksReleased() int32 {
	if x != nil {
		return x.OrphanedLocksReleased
	}
	return 0
}

type OrchestratorEntityParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityMessageReorderWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=entityMessageReorderWindow,proto3" json:"entityMessageReorderWindow,omitempty"`
}

func (x *OrchestratorEntityParameters) Reset() {
	*x = OrchestratorEntityParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorEntityParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorEntityParameters) ProtoMessage() {}

func (x *OrchestratorEntityParameters) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorEntityParameters.ProtoReflect.Descriptor instead.
func (*OrchestratorEntityParameters) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{80}
}

func (x *OrchestratorEntityParameters) GetEntityMessageReorderWindow() *durationpb.Duration {
	if x != nil {
		return x.EntityMessageReorderWindow
	}
	return nil
}

type EntityBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId  string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	EntityState *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=entityState,proto3" json:"entityState,omitempty"`
	Operations  []*OperationRequest     `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *EntityBatchRequest) Reset() {
	*x = EntityBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityBatchRequest) ProtoMessage() {}

func (x *EntityBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityBatchRequest.ProtoReflect.Descriptor instead.
func (*EntityBatchRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{81}
}

func (x *EntityBatchRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EntityBatchRequest) GetEntityState() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityState
	}
	return nil
}

func (x *EntityBatchRequest) GetOperations() []*OperationRequest {
	if x != nil {
		return x.Operations
	}
	return nil
}

type EntityBatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results         []*OperationResult      `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Actions         []*OperationAction      `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	EntityState     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=entityState,proto3" json:"entityState,omitempty"`
	FailureDetails  *TaskFailureDetails     `protobuf:"bytes,4,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
	CompletionToken string                  `protobuf:"bytes,5,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
	OperationInfos  []*OperationInfo        `protobuf:"bytes,6,rep,name=operationInfos,proto3" json:"operationInfos,omitempty"` // used only with DTS
}

func (x *EntityBatchResult) Reset() {
	*x = EntityBatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityBatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityBatchResult) ProtoMessage() {}

func (x *EntityBatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityBatchResult.ProtoReflect.Descriptor instead.
func (*EntityBatchResult) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{82}
}

func (x *EntityBatchResult) GetResults() []*OperationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *EntityBatchResult) GetActions() []*OperationAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EntityBatchResult) GetEntityState() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityState
	}
	return nil
}

func (x *EntityBatchResult) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

func (x *EntityBatchResult) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *EntityBatchResult) GetOperationInfos() []*OperationInfo {
	if x != nil {
		return x.OperationInfos
	}
	return nil
}

type EntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId        string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ExecutionId       string                  `protobuf:"bytes,2,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EntityState       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=entityState,proto3" json:"entityState,omitempty"` // null if entity does not exist
	OperationRequests []*HistoryEvent         `protobuf:"bytes,4,rep,name=operationRequests,proto3" json:"operationRequests,omitempty"`
}

func (x *EntityRequest) Reset() {
	*x = EntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRequest) ProtoMessage() {}

func (x *EntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRequest.ProtoReflect.Descriptor instead.
func (*EntityRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{83}
}

func (x *EntityRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EntityRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *EntityRequest) GetEntityState() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityState
	}
	return nil
}

func (x *EntityRequest) GetOperationRequests() []*HistoryEvent {
	if x != nil {
		return x.OperationRequests
	}
	return nil
}

type OperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation string                  `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	RequestId string                  `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Input     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *OperationRequest) Reset() {
	*x = OperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRequest) ProtoMessage() {}

func (x *OperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRequest.ProtoReflect.Descriptor instead.
func (*OperationRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{84}
}

func (x *OperationRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *OperationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *OperationRequest) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type OperationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultType:
	//
	//	*OperationResult_Success
	//	*OperationResult_Failure
	ResultType isOperationResult_ResultType `protobuf_oneof:"resultType"`
}

func (x *OperationResult) Reset() {
	*x = OperationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResult) ProtoMessage() {}

func (x *OperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResult.ProtoReflect.Descriptor instead.
func (*OperationResult) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{85}
}

func (m *OperationResult) GetResultType() isOperationResult_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *OperationResult) GetSuccess() *OperationResultSuccess {
	if x, ok := x.GetResultType().(*OperationResult_Success); ok {
		return x.Success
	}
	return nil
}

func (x *OperationResult) GetFailure() *OperationResultFailure {
	if x, ok := x.GetResultType().(*OperationResult_Failure); ok {
		return x.Failure
	}
	return nil
}

type isOperationResult_ResultType interface {
	isOperationResult_ResultType()
}

type OperationResult_Success struct {
	Success *OperationResultSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type OperationResult_Failure struct {
	Failure *OperationResultFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*OperationResult_Success) isOperationResult_ResultType() {}

func (*OperationResult_Failure) isOperationResult_ResultType() {}

type OperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           string                 `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	ResponseDestination *OrchestrationInstance `protobuf:"bytes,2,opt,name=responseDestination,proto3" json:"responseDestination,omitempty"` // null for signals
}

func (x *OperationInfo) Reset() {
	*x = OperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInfo) ProtoMessage() {}

func (x *OperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInfo.ProtoReflect.Descriptor instead.
func (*OperationInfo) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{86}
}

func (x *OperationInfo) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *OperationInfo) GetResponseDestination() *OrchestrationInstance {
	if x != nil {
		return x.ResponseDestination
	}
	return nil
}

type OperationResultSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *OperationResultSuccess) Reset() {
	*x = OperationResultSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationResultSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResultSuccess) ProtoMessage() {}

func (x *OperationResultSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResultSuccess.ProtoReflect.Descriptor instead.
func (*OperationResultSuccess) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{87}
}

func (x *OperationResultSuccess) GetResult() *wrapperspb.StringValue {
	if x != nil {
		return x.Result
	}
	return nil
}

type OperationResultFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureDetails *TaskFailureDetails `protobuf:"bytes,1,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
}

func (x *OperationResultFailure) Reset() {
	*x = OperationResultFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationResultFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResultFailure) ProtoMessage() {}

func (x *OperationResultFailure) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResultFailure.ProtoReflect.Descriptor instead.
func (*OperationResultFailure) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{88}
}

func (x *OperationResultFailure) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type OperationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to OperationActionType:
	//
	//	*OperationAction_SendSignal
	//	*OperationAction_StartNewOrchestration
	OperationActionType isOperationAction_OperationActionType `protobuf_oneof:"operationActionType"`
}

func (x *OperationAction) Reset() {
	*x = OperationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationAction) ProtoMessage() {}

func (x *OperationAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationAction.ProtoReflect.Descriptor instead.
func (*OperationAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{89}
}

func (x *OperationAction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *OperationAction) GetOperationActionType() isOperationAction_OperationActionType {
	if m != nil {
		return m.OperationActionType
	}
	return nil
}

func (x *OperationAction) GetSendSignal() *SendSignalAction {
	if x, ok := x.GetOperationActionType().(*OperationAction_SendSignal); ok {
		return x.SendSignal
	}
	return nil
}

func (x *OperationAction) GetStartNewOrchestration() *StartNewOrchestrationAction {
	if x, ok := x.GetOperationActionType().(*OperationAction_StartNewOrchestration); ok {
		return x.StartNewOrchestration
	}
	return nil
}

type isOperationAction_OperationActionType interface {
	isOperationAction_OperationActionType()
}

type OperationAction_SendSignal struct {
	SendSignal *SendSignalAction `protobuf:"bytes,2,opt,name=sendSignal,proto3,oneof"`
}

type OperationAction_StartNewOrchestration struct {
	StartNewOrchestration *StartNewOrchestrationAction `protobuf:"bytes,3,opt,name=startNewOrchestration,proto3,oneof"`
}

func (*OperationAction_SendSignal) isOperationAction_OperationActionType() {}

func (*OperationAction_StartNewOrchestration) isOperationAction_OperationActionType() {}

type SendSignalAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId    string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTime *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
}

func (x *SendSignalAction) Reset() {
	*x = SendSignalAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSignalAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignalAction) ProtoMessage() {}

func (x *SendSignalAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignalAction.ProtoReflect.Descriptor instead.
func (*SendSignalAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{90}
}

func (x *SendSignalAction) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SendSignalAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SendSignalAction) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SendSignalAction) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

type StartNewOrchestrationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId    string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Input         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTime *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
}

func (x *StartNewOrchestrationAction) Reset() {
	*x = StartNewOrchestrationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartNewOrchestrationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartNewOrchestrationAction) ProtoMessage() {}

func (x *StartNewOrchestrationAction) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartNewOrchestrationAction.ProtoReflect.Descriptor instead.
func (*StartNewOrchestrationAction) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{91}
}

func (x *StartNewOrchestrationAction) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StartNewOrchestrationAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartNewOrchestrationAction) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *StartNewOrchestrationAction) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartNewOrchestrationAction) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

type AbandonActivityTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionToken string `protobuf:"bytes,1,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
}

func (x *AbandonActivityTaskRequest) Reset() {
	*x = AbandonActivityTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonActivityTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonActivityTaskRequest) ProtoMessage() {}

func (x *AbandonActivityTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonActivityTaskRequest.ProtoReflect.Descriptor instead.
func (*AbandonActivityTaskRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{92}
}

func (x *AbandonActivityTaskRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

type AbandonActivityTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbandonActivityTaskResponse) Reset() {
	*x = AbandonActivityTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonActivityTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonActivityTaskResponse) ProtoMessage() {}

func (x *AbandonActivityTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonActivityTaskResponse.ProtoReflect.Descriptor instead.
func (*AbandonActivityTaskResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{93}
}

type AbandonOrchestrationTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionToken string `protobuf:"bytes,1,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
}

func (x *AbandonOrchestrationTaskRequest) Reset() {
	*x = AbandonOrchestrationTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonOrchestrationTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonOrchestrationTaskRequest) ProtoMessage() {}

func (x *AbandonOrchestrationTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonOrchestrationTaskRequest.ProtoReflect.Descriptor instead.
func (*AbandonOrchestrationTaskRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{94}
}

func (x *AbandonOrchestrationTaskRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

type AbandonOrchestrationTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbandonOrchestrationTaskResponse) Reset() {
	*x = AbandonOrchestrationTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonOrchestrationTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonOrchestrationTaskResponse) ProtoMessage() {}

func (x *AbandonOrchestrationTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonOrchestrationTaskResponse.ProtoReflect.Descriptor instead.
func (*AbandonOrchestrationTaskResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{95}
}

type AbandonEntityTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionToken string `protobuf:"bytes,1,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
}

func (x *AbandonEntityTaskRequest) Reset() {
	*x = AbandonEntityTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonEntityTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonEntityTaskRequest) ProtoMessage() {}

func (x *AbandonEntityTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonEntityTaskRequest.ProtoReflect.Descriptor instead.
func (*AbandonEntityTaskRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{96}
}

func (x *AbandonEntityTaskRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

type AbandonEntityTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbandonEntityTaskResponse) Reset() {
	*x = AbandonEntityTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonEntityTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonEntityTaskResponse) ProtoMessage() {}

func (x *AbandonEntityTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonEntityTaskResponse.ProtoReflect.Descriptor instead.
func (*AbandonEntityTaskResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{97}
}

type GetWorkItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxConcurrentOrchestrationWorkItems int32              `protobuf:"varint,1,opt,name=maxConcurrentOrchestrationWorkItems,proto3" json:"maxConcurrentOrchestrationWorkItems,omitempty"`
	MaxConcurrentActivityWorkItems      int32              `protobuf:"varint,2,opt,name=maxConcurrentActivityWorkItems,proto3" json:"maxConcurrentActivityWorkItems,omitempty"`
	MaxConcurrentEntityWorkItems        int32              `protobuf:"varint,3,opt,name=maxConcurrentEntityWorkItems,proto3" json:"maxConcurrentEntityWorkItems,omitempty"`
	Capabilities                        []WorkerCapability `protobuf:"varint,10,rep,packed,name=capabilities,proto3,enum=WorkerCapability" json:"capabilities,omitempty"`
}

func (x *GetWorkItemsRequest) Reset() {
	*x = GetWorkItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkItemsRequest) ProtoMessage() {}

func (x *GetWorkItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkItemsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkItemsRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{98}
}

func (x *GetWorkItemsRequest) GetMaxConcurrentOrchestrationWorkItems() int32 {
	if x != nil {
		return x.MaxConcurrentOrchestrationWorkItems
	}
	return 0
}

func (x *GetWorkItemsRequest) GetMaxConcurrentActivityWorkItems() int32 {
	if x != nil {
		return x.MaxConcurrentActivityWorkItems
	}
	return 0
}

func (x *GetWorkItemsRequest) GetMaxConcurrentEntityWorkItems() int32 {
	if x != nil {
		return x.MaxConcurrentEntityWorkItems
	}
	return 0
}

func (x *GetWorkItemsRequest) GetCapabilities() []WorkerCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type WorkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*WorkItem_OrchestratorRequest
	//	*WorkItem_ActivityRequest
	//	*WorkItem_EntityRequest
	//	*WorkItem_HealthPing
	//	*WorkItem_EntityRequestV2
	Request         isWorkItem_Request `protobuf_oneof:"request"`
	CompletionToken string             `protobuf:"bytes,10,opt,name=completionToken,proto3" json:"completionToken,omitempty"`
}

func (x *WorkItem) Reset() {
	*x = WorkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkItem) ProtoMessage() {}

func (x *WorkItem) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkItem.ProtoReflect.Descriptor instead.
func (*WorkItem) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{99}
}

func (m *WorkItem) GetRequest() isWorkItem_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *WorkItem) GetOrchestratorRequest() *OrchestratorRequest {
	if x, ok := x.GetRequest().(*WorkItem_OrchestratorRequest); ok {
		return x.OrchestratorRequest
	}
	return nil
}

func (x *WorkItem) GetActivityRequest() *ActivityRequest {
	if x, ok := x.GetRequest().(*WorkItem_ActivityRequest); ok {
		return x.ActivityRequest
	}
	return nil
}

func (x *WorkItem) GetEntityRequest() *EntityBatchRequest {
	if x, ok := x.GetRequest().(*WorkItem_EntityRequest); ok {
		return x.EntityRequest
	}
	return nil
}

func (x *WorkItem) GetHealthPing() *HealthPing {
	if x, ok := x.GetRequest().(*WorkItem_HealthPing); ok {
		return x.HealthPing
	}
	return nil
}

func (x *WorkItem) GetEntityRequestV2() *EntityRequest {
	if x, ok := x.GetRequest().(*WorkItem_EntityRequestV2); ok {
		return x.EntityRequestV2
	}
	return nil
}

func (x *WorkItem) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

type isWorkItem_Request interface {
	isWorkItem_Request()
}

type WorkItem_OrchestratorRequest struct {
	OrchestratorRequest *OrchestratorRequest `protobuf:"bytes,1,opt,name=orchestratorRequest,proto3,oneof"`
}

type WorkItem_ActivityRequest struct {
	ActivityRequest *ActivityRequest `protobuf:"bytes,2,opt,name=activityRequest,proto3,oneof"`
}

type WorkItem_EntityRequest struct {
	EntityRequest *EntityBatchRequest `protobuf:"bytes,3,opt,name=entityRequest,proto3,oneof"` // (older) used by orchestration services implementations
}

type WorkItem_HealthPing struct {
	HealthPing *HealthPing `protobuf:"bytes,4,opt,name=healthPing,proto3,oneof"`
}

type WorkItem_EntityRequestV2 struct {
	EntityRequestV2 *EntityRequest `protobuf:"bytes,5,opt,name=entityRequestV2,proto3,oneof"` // (newer) used by backend service implementations
}

func (*WorkItem_OrchestratorRequest) isWorkItem_Request() {}

func (*WorkItem_ActivityRequest) isWorkItem_Request() {}

func (*WorkItem_EntityRequest) isWorkItem_Request() {}

func (*WorkItem_HealthPing) isWorkItem_Request() {}

func (*WorkItem_EntityRequestV2) isWorkItem_Request() {}

type CompleteTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteTaskResponse) Reset() {
	*x = CompleteTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskResponse) ProtoMessage() {}

func (x *CompleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskResponse.ProtoReflect.Descriptor instead.
func (*CompleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{100}
}

type HealthPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthPing) Reset() {
	*x = HealthPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthPing) ProtoMessage() {}

func (x *HealthPing) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthPing.ProtoReflect.Descriptor instead.
func (*HealthPing) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{101}
}

type StreamInstanceHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId  string                  `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ExecutionId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=executionId,proto3" json:"executionId,omitempty"`
	// When set to true, the service may return a more optimized response suitable for workers.
	ForWorkItemProcessing bool `protobuf:"varint,3,opt,name=forWorkItemProcessing,proto3" json:"forWorkItemProcessing,omitempty"`
}

func (x *StreamInstanceHistoryRequest) Reset() {
	*x = StreamInstanceHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInstanceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInstanceHistoryRequest) ProtoMessage() {}

func (x *StreamInstanceHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInstanceHistoryRequest.ProtoReflect.Descriptor instead.
func (*StreamInstanceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{102}
}

func (x *StreamInstanceHistoryRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StreamInstanceHistoryRequest) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

func (x *StreamInstanceHistoryRequest) GetForWorkItemProcessing() bool {
	if x != nil {
		return x.ForWorkItemProcessing
	}
	return false
}

type HistoryChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*HistoryEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *HistoryChunk) Reset() {
	*x = HistoryChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryChunk) ProtoMessage() {}

func (x *HistoryChunk) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryChunk.ProtoReflect.Descriptor instead.
func (*HistoryChunk) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{103}
}

func (x *HistoryChunk) GetEvents() []*HistoryEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// RerunWorkflowFromEventRequest is used to rerun a workflow instance from a
// specific event ID.
type RerunWorkflowFromEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sourceInstanceID is the orchestration instance ID to rerun. Can be a top
	// level instance, or sub-orchestration instance.
	SourceInstanceID string `protobuf:"bytes,1,opt,name=sourceInstanceID,proto3" json:"sourceInstanceID,omitempty"`
	// the event id to start the new workflow instance from.
	EventID uint32 `protobuf:"varint,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
	// newInstanceID is the new instance ID to use for the new workflow instance.
	// If not given, a random instance ID will be given.
	NewInstanceID *string `protobuf:"bytes,3,opt,name=newInstanceID,proto3,oneof" json:"newInstanceID,omitempty"`
	// input can optionally given to give the new instance a different input to
	// the next Activity event.
	Input *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// overwrite_input signals that the input to the rerun activity should be
	// written with input. This is required because of the incorrect typing of
	// inputs being `StringValue` which cannot be optional, and therefore no nil
	// value can be signalled or overwritten.
	OverwriteInput bool `protobuf:"varint,5,opt,name=overwriteInput,proto3" json:"overwriteInput,omitempty"`
}

func (x *RerunWorkflowFromEventRequest) Reset() {
	*x = RerunWorkflowFromEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunWorkflowFromEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunWorkflowFromEventRequest) ProtoMessage() {}

func (x *RerunWorkflowFromEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunWorkflowFromEventRequest.ProtoReflect.Descriptor instead.
func (*RerunWorkflowFromEventRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{104}
}

func (x *RerunWorkflowFromEventRequest) GetSourceInstanceID() string {
	if x != nil {
		return x.SourceInstanceID
	}
	return ""
}

func (x *RerunWorkflowFromEventRequest) GetEventID() uint32 {
	if x != nil {
		return x.EventID
	}
	return 0
}

func (x *RerunWorkflowFromEventRequest) GetNewInstanceID() string {
	if x != nil && x.NewInstanceID != nil {
		return *x.NewInstanceID
	}
	return ""
}

func (x *RerunWorkflowFromEventRequest) GetInput() *wrapperspb.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *RerunWorkflowFromEventRequest) GetOverwriteInput() bool {
	if x != nil {
		return x.OverwriteInput
	}
	return false
}

// RerunWorkflowFromEventResponse is the response to executing
// RerunWorkflowFromEvent.
type RerunWorkflowFromEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewInstanceID string `protobuf:"bytes,1,opt,name=newInstanceID,proto3" json:"newInstanceID,omitempty"`
}

func (x *RerunWorkflowFromEventResponse) Reset() {
	*x = RerunWorkflowFromEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orchestrator_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunWorkflowFromEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunWorkflowFromEventResponse) ProtoMessage() {}

func (x *RerunWorkflowFromEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunWorkflowFromEventResponse.ProtoReflect.Descriptor instead.
func (*RerunWorkflowFromEventResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_service_proto_rawDescGZIP(), []int{105}
}

func (x *RerunWorkflowFromEventResponse) GetNewInstanceID() string {
	if x != nil {
		return x.NewInstanceID
	}
	return ""
}

var File_orchestrator_service_proto protoreflect.FileDescriptor

var file_orchestrator_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x15, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe7, 0x01, 0x0a,
	0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3b, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf6,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x15, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x70,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xf6, 0x04, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4c,
	0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e,
	0x0a, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x34,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01,
	0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x68, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x74, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x0f, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x24, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x88, 0x01, 0x0a,
	0x26, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x69, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66,
	0x69, 0x72, 0x65, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x66, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5f, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x72, 0x65, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x66, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1c,
	0x0a, 0x1a, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x0e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x5a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x69, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x11, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x48,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4d, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x1c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0xae, 0x03, 0x0a, 0x1a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x73, 0x0a,
	0x1d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x77, 0x0a, 0x1a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x15,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xd3, 0x10, 0x0a, 0x0c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53,
	0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x21, 0x73, 0x75,
	0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x6e, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x1e, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4d, 0x0a,
	0x13, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x15,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x69, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x18, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63,
	0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xbe, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x69, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x72, 0x65, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x66, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x03, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0a,
	0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x61,
	0x72, 0x72, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x72, 0x79, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x65, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a,
	0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x04, 0x0a, 0x12, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x57, 0x0a, 0x16, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd8, 0x02, 0x0a, 0x13, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4b,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xd8, 0x04, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5b, 0x0a, 0x1a, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65,
	0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x1a, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x6d, 0x0a, 0x15, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x18,
	0x0a, 0x16, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x07, 0x0a, 0x12, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x4e, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x11,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a,
	0x0e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x10, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x8d, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x48, 0x75,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x48, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x48, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x01, 0x0a,
	0x15, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x13,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x3a, 0x0a, 0x0d, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x42, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xdd, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x54, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc0, 0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4a, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x1c, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x11,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x89,
	0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x13,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a,
	0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xff, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x46, 0x0a, 0x1a, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x1f, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x18, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x1b, 0x0a, 0x19, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x02, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x23, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x42,
	0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x08, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e,
	0x67, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x35, 0x0a, 0x0c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xfe, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x22, 0x46, 0x0a, 0x1e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x2a, 0xb5, 0x02, 0x0a, 0x13, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52,
	0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e,
	0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x07,
	0x2a, 0x41, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x4f,
	0x52, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x32, 0xb6, 0x0e, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x52,
	0x65, 0x77, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x13, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x19, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x2e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x15, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x15, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x15, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x12, 0x15, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x12, 0x15, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x15, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x2e, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x19, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x2e, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x16, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x0a, 0x31,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x64, 0x75,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x5a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xaa, 0x02,
	0x1e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orchestrator_service_proto_rawDescOnce sync.Once
	file_orchestrator_service_proto_rawDescData = file_orchestrator_service_proto_rawDesc
)

func file_orchestrator_service_proto_rawDescGZIP() []byte {
	file_orchestrator_service_proto_rawDescOnce.Do(func() {
		file_orchestrator_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_orchestrator_service_proto_rawDescData)
	})
	return file_orchestrator_service_proto_rawDescData
}

var file_orchestrator_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_orchestrator_service_proto_msgTypes = make([]protoimpl.MessageInfo, 109)
var file_orchestrator_service_proto_goTypes = []interface{}{
	(OrchestrationStatus)(0),                       // 0: OrchestrationStatus
	(CreateOrchestrationAction)(0),                 // 1: CreateOrchestrationAction
	(WorkerCapability)(0),                          // 2: WorkerCapability
	(*OrchestrationInstance)(nil),                  // 3: OrchestrationInstance
	(*ActivityRequest)(nil),                        // 4: ActivityRequest
	(*ActivityResponse)(nil),                       // 5: ActivityResponse
	(*TaskFailureDetails)(nil),                     // 6: TaskFailureDetails
	(*ParentInstanceInfo)(nil),                     // 7: ParentInstanceInfo
	(*TraceContext)(nil),                           // 8: TraceContext
	(*ExecutionStartedEvent)(nil),                  // 9: ExecutionStartedEvent
	(*ExecutionCompletedEvent)(nil),                // 10: ExecutionCompletedEvent
	(*ExecutionTerminatedEvent)(nil),               // 11: ExecutionTerminatedEvent
	(*TaskScheduledEvent)(nil),                     // 12: TaskScheduledEvent
	(*TaskCompletedEvent)(nil),                     // 13: TaskCompletedEvent
	(*TaskFailedEvent)(nil),                        // 14: TaskFailedEvent
	(*SubOrchestrationInstanceCreatedEvent)(nil),   // 15: SubOrchestrationInstanceCreatedEvent
	(*SubOrchestrationInstanceCompletedEvent)(nil), // 16: SubOrchestrationInstanceCompletedEvent
	(*SubOrchestrationInstanceFailedEvent)(nil),    // 17: SubOrchestrationInstanceFailedEvent
	(*TimerCreatedEvent)(nil),                      // 18: TimerCreatedEvent
	(*TimerFiredEvent)(nil),                        // 19: TimerFiredEvent
	(*OrchestratorStartedEvent)(nil),               // 20: OrchestratorStartedEvent
	(*OrchestratorCompletedEvent)(nil),             // 21: OrchestratorCompletedEvent
	(*EventSentEvent)(nil),                         // 22: EventSentEvent
	(*EventRaisedEvent)(nil),                       // 23: EventRaisedEvent
	(*GenericEvent)(nil),                           // 24: GenericEvent
	(*HistoryStateEvent)(nil),                      // 25: HistoryStateEvent
	(*ContinueAsNewEvent)(nil),                     // 26: ContinueAsNewEvent
	(*ExecutionSuspendedEvent)(nil),                // 27: ExecutionSuspendedEvent
	(*ExecutionResumedEvent)(nil),                  // 28: ExecutionResumedEvent
	(*EntityOperationSignaledEvent)(nil),           // 29: EntityOperationSignaledEvent
	(*EntityOperationCalledEvent)(nil),             // 30: EntityOperationCalledEvent
	(*EntityLockRequestedEvent)(nil),               // 31: EntityLockRequestedEvent
	(*EntityOperationCompletedEvent)(nil),          // 32: EntityOperationCompletedEvent
	(*EntityOperationFailedEvent)(nil),             // 33: EntityOperationFailedEvent
	(*EntityUnlockSentEvent)(nil),                  // 34: EntityUnlockSentEvent
	(*EntityLockGrantedEvent)(nil),                 // 35: EntityLockGrantedEvent
	(*HistoryEvent)(nil),                           // 36: HistoryEvent
	(*ScheduleTaskAction)(nil),                     // 37: ScheduleTaskAction
	(*CreateSubOrchestrationAction)(nil),           // 38: CreateSubOrchestrationAction
	(*CreateTimerAction)(nil),                      // 39: CreateTimerAction
	(*SendEventAction)(nil),                        // 40: SendEventAction
	(*CompleteOrchestrationAction)(nil),            // 41: CompleteOrchestrationAction
	(*TerminateOrchestrationAction)(nil),           // 42: TerminateOrchestrationAction
	(*SendEntityMessageAction)(nil),                // 43: SendEntityMessageAction
	(*OrchestratorAction)(nil),                     // 44: OrchestratorAction
	(*OrchestratorRequest)(nil),                    // 45: OrchestratorRequest
	(*OrchestratorResponse)(nil),                   // 46: OrchestratorResponse
	(*CreateInstanceRequest)(nil),                  // 47: CreateInstanceRequest
	(*OrchestrationIdReusePolicy)(nil),             // 48: OrchestrationIdReusePolicy
	(*CreateInstanceResponse)(nil),                 // 49: CreateInstanceResponse
	(*GetInstanceRequest)(nil),                     // 50: GetInstanceRequest
	(*GetInstanceResponse)(nil),                    // 51: GetInstanceResponse
	(*RewindInstanceRequest)(nil),                  // 52: RewindInstanceRequest
	(*RewindInstanceResponse)(nil),                 // 53: RewindInstanceResponse
	(*OrchestrationState)(nil),                     // 54: OrchestrationState
	(*RaiseEventRequest)(nil),                      // 55: RaiseEventRequest
	(*RaiseEventResponse)(nil),                     // 56: RaiseEventResponse
	(*TerminateRequest)(nil),                       // 57: TerminateRequest
	(*TerminateResponse)(nil),                      // 58: TerminateResponse
	(*SuspendRequest)(nil),                         // 59: SuspendRequest
	(*SuspendResponse)(nil),                        // 60: SuspendResponse
	(*ResumeRequest)(nil),                          // 61: ResumeRequest
	(*ResumeResponse)(nil),                         // 62: ResumeResponse
	(*QueryInstancesRequest)(nil),                  // 63: QueryInstancesRequest
	(*InstanceQuery)(nil),                          // 64: InstanceQuery
	(*QueryInstancesResponse)(nil),                 // 65: QueryInstancesResponse
	(*PurgeInstancesRequest)(nil),                  // 66: PurgeInstancesRequest
	(*PurgeInstanceFilter)(nil),                    // 67: PurgeInstanceFilter
	(*PurgeInstancesResponse)(nil),                 // 68: PurgeInstancesResponse
	(*CreateTaskHubRequest)(nil),                   // 69: CreateTaskHubRequest
	(*CreateTaskHubResponse)(nil),                  // 70: CreateTaskHubResponse
	(*DeleteTaskHubRequest)(nil),                   // 71: DeleteTaskHubRequest
	(*DeleteTaskHubResponse)(nil),                  // 72: DeleteTaskHubResponse
	(*SignalEntityRequest)(nil),                    // 73: SignalEntityRequest
	(*SignalEntityResponse)(nil),                   // 74: SignalEntityResponse
	(*GetEntityRequest)(nil),                       // 75: GetEntityRequest
	(*GetEntityResponse)(nil),                      // 76: GetEntityResponse
	(*EntityQuery)(nil),                            // 77: EntityQuery
	(*QueryEntitiesRequest)(nil),                   // 78: QueryEntitiesRequest
	(*QueryEntitiesResponse)(nil),                  // 79: QueryEntitiesResponse
	(*EntityMetadata)(nil),                         // 80: EntityMetadata
	(*CleanEntityStorageRequest)(nil),              // 81: CleanEntityStorageRequest
	(*CleanEntityStorageResponse)(nil),             // 82: CleanEntityStorageResponse
	(*OrchestratorEntityParameters)(nil),           // 83: OrchestratorEntityParameters
	(*EntityBatchRequest)(nil),                     // 84: EntityBatchRequest
	(*EntityBatchResult)(nil),                      // 85: EntityBatchResult
	(*EntityRequest)(nil),                          // 86: EntityRequest
	(*OperationRequest)(nil),                       // 87: OperationRequest
	(*OperationResult)(nil),                        // 88: OperationResult
	(*OperationInfo)(nil),                          // 89: OperationInfo
	(*OperationResultSuccess)(nil),                 // 90: OperationResultSuccess
	(*OperationResultFailure)(nil),                 // 91: OperationResultFailure
	(*OperationAction)(nil),                        // 92: OperationAction
	(*SendSignalAction)(nil),                       // 93: SendSignalAction
	(*StartNewOrchestrationAction)(nil),            // 94: StartNewOrchestrationAction
	(*AbandonActivityTaskRequest)(nil),             // 95: AbandonActivityTaskRequest
	(*AbandonActivityTaskResponse)(nil),            // 96: AbandonActivityTaskResponse
	(*AbandonOrchestrationTaskRequest)(nil),        // 97: AbandonOrchestrationTaskRequest
	(*AbandonOrchestrationTaskResponse)(nil),       // 98: AbandonOrchestrationTaskResponse
	(*AbandonEntityTaskRequest)(nil),               // 99: AbandonEntityTaskRequest
	(*AbandonEntityTaskResponse)(nil),              // 100: AbandonEntityTaskResponse
	(*GetWorkItemsRequest)(nil),                    // 101: GetWorkItemsRequest
	(*WorkItem)(nil),                               // 102: WorkItem
	(*CompleteTaskResponse)(nil),                   // 103: CompleteTaskResponse
	(*HealthPing)(nil),                             // 104: HealthPing
	(*StreamInstanceHistoryRequest)(nil),           // 105: StreamInstanceHistoryRequest
	(*HistoryChunk)(nil),                           // 106: HistoryChunk
	(*RerunWorkflowFromEventRequest)(nil),          // 107: RerunWorkflowFromEventRequest
	(*RerunWorkflowFromEventResponse)(nil),         // 108: RerunWorkflowFromEventResponse
	nil,                                            // 109: ExecutionStartedEvent.TagsEntry
	nil,                                            // 110: CreateInstanceRequest.TagsEntry
	nil,                                            // 111: OrchestrationState.TagsEntry
	(*wrapperspb.StringValue)(nil),                 // 112: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                  // 113: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),                  // 114: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                   // 115: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),                    // 116: google.protobuf.Duration
	(*emptypb.Empty)(nil),                          // 117: google.protobuf.Empty
}
var file_orchestrator_service_proto_depIdxs = []int32{
	112, // 0: OrchestrationInstance.executionId:type_name -> google.protobuf.StringValue
	112, // 1: ActivityRequest.version:type_name -> google.protobuf.StringValue
	112, // 2: ActivityRequest.input:type_name -> google.protobuf.StringValue
	3,   // 3: ActivityRequest.orchestrationInstance:type_name -> OrchestrationInstance
	8,   // 4: ActivityRequest.parentTraceContext:type_name -> TraceContext
	112, // 5: ActivityResponse.result:type_name -> google.protobuf.StringValue
	6,   // 6: ActivityResponse.failureDetails:type_name -> TaskFailureDetails
	112, // 7: TaskFailureDetails.stackTrace:type_name -> google.protobuf.StringValue
	6,   // 8: TaskFailureDetails.innerFailure:type_name -> TaskFailureDetails
	112, // 9: ParentInstanceInfo.name:type_name -> google.protobuf.StringValue
	112, // 10: ParentInstanceInfo.version:type_name -> google.protobuf.StringValue
	3,   // 11: ParentInstanceInfo.orchestrationInstance:type_name -> OrchestrationInstance
	112, // 12: TraceContext.traceState:type_name -> google.protobuf.StringValue
	112, // 13: ExecutionStartedEvent.version:type_name -> google.protobuf.StringValue
	112, // 14: ExecutionStartedEvent.input:type_name -> google.protobuf.StringValue
	3,   // 15: ExecutionStartedEvent.orchestrationInstance:type_name -> OrchestrationInstance
	7,   // 16: ExecutionStartedEvent.parentInstance:type_name -> ParentInstanceInfo
	113, // 17: ExecutionStartedEvent.scheduledStartTimestamp:type_name -> google.protobuf.Timestamp
	8,   // 18: ExecutionStartedEvent.parentTraceContext:type_name -> TraceContext
	112, // 19: ExecutionStartedEvent.orchestrationSpanID:type_name -> google.protobuf.StringValue
	109, // 20: ExecutionStartedEvent.tags:type_name -> ExecutionStartedEvent.TagsEntry
	0,   // 21: ExecutionCompletedEvent.orchestrationStatus:type_name -> OrchestrationStatus
	112, // 22: ExecutionCompletedEvent.result:type_name -> google.protobuf.StringValue
	6,   // 23: ExecutionCompletedEvent.failureDetails:type_name -> TaskFailureDetails
	112, // 24: ExecutionTerminatedEvent.input:type_name -> google.protobuf.StringValue
	112, // 25: TaskScheduledEvent.version:type_name -> google.protobuf.StringValue
	112, // 26: TaskScheduledEvent.input:type_name -> google.protobuf.StringValue
	8,   // 27: TaskScheduledEvent.parentTraceContext:type_name -> TraceContext
	112, // 28: TaskCompletedEvent.result:type_name -> google.protobuf.StringValue
	6,   // 29: TaskFailedEvent.failureDetails:type_name -> TaskFailureDetails
	112, // 30: SubOrchestrationInstanceCreatedEvent.version:type_name -> google.protobuf.StringValue
	112, // 31: SubOrchestrationInstanceCreatedEvent.input:type_name -> google.protobuf.StringValue
	8,   // 32: SubOrchestrationInstanceCreatedEvent.parentTraceContext:type_name -> TraceContext
	112, // 33: SubOrchestrationInstanceCompletedEvent.result:type_name -> google.protobuf.StringValue
	6,   // 34: SubOrchestrationInstanceFailedEvent.failureDetails:type_name -> TaskFailureDetails
	113, // 35: TimerCreatedEvent.fireAt:type_name -> google.protobuf.Timestamp
	113, // 36: TimerFiredEvent.fireAt:type_name -> google.protobuf.Timestamp
	112, // 37: EventSentEvent.input:type_name -> google.protobuf.StringValue
	112, // 38: EventRaisedEvent.input:type_name -> google.protobuf.StringValue
	112, // 39: GenericEvent.data:type_name -> google.protobuf.StringValue
	54,  // 40: HistoryStateEvent.orchestrationState:type_name -> OrchestrationState
	112, // 41: ContinueAsNewEvent.input:type_name -> google.protobuf.StringValue
	112, // 42: ExecutionSuspendedEvent.input:type_name -> google.protobuf.StringValue
	112, // 43: ExecutionResumedEvent.input:type_name -> google.protobuf.StringValue
	113, // 44: EntityOperationSignaledEvent.scheduledTime:type_name -> google.protobuf.Timestamp
	112, // 45: EntityOperationSignaledEvent.input:type_name -> google.protobuf.StringValue
	112, // 46: EntityOperationSignaledEvent.targetInstanceId:type_name -> google.protobuf.StringValue
	113, // 47: EntityOperationCalledEvent.scheduledTime:type_name -> google.protobuf.Timestamp
	112, // 48: EntityOperationCalledEvent.input:type_name -> google.protobuf.StringValue
	112, // 49: EntityOperationCalledEvent.parentInstanceId:type_name -> google.protobuf.StringValue
	112, // 50: EntityOperationCalledEvent.parentExecutionId:type_name -> google.protobuf.StringValue
	112, // 51: EntityOperationCalledEvent.targetInstanceId:type_name -> google.protobuf.StringValue
	112, // 52: EntityLockRequestedEvent.parentInstanceId:type_name -> google.protobuf.StringValue
	112, // 53: EntityOperationCompletedEvent.output:type_name -> google.protobuf.StringValue
	6,   // 54: EntityOperationFailedEvent.failureDetails:type_name -> TaskFailureDetails
	112, // 55: EntityUnlockSentEvent.parentInstanceId:type_name -> google.protobuf.StringValue
	112, // 56: EntityUnlockSentEvent.targetInstanceId:type_name -> google.protobuf.StringValue
	113, // 57: HistoryEvent.timestamp:type_name -> google.protobuf.Timestamp
	9,   // 58: HistoryEvent.executionStarted:type_name -> ExecutionStartedEvent
	10,  // 59: HistoryEvent.executionCompleted:type_name -> ExecutionCompletedEvent
	11,  // 60: HistoryEvent.executionTerminated:type_name -> ExecutionTerminatedEvent
	12,  // 61: HistoryEvent.taskScheduled:type_name -> TaskScheduledEvent
	13,  // 62: HistoryEvent.taskCompleted:type_name -> TaskCompletedEvent
	14,  // 63: HistoryEvent.taskFailed:type_name -> TaskFailedEvent
	15,  // 64: HistoryEvent.subOrchestrationInstanceCreated:type_name -> SubOrchestrationInstanceCreatedEvent
	16,  // 65: HistoryEvent.subOrchestrationInstanceCompleted:type_name -> SubOrchestrationInstanceCompletedEvent
	17,  // 66: HistoryEvent.subOrchestrationInstanceFailed:type_name -> SubOrchestrationInstanceFailedEvent
	18,  // 67: HistoryEvent.timerCreated:type_name -> TimerCreatedEvent
	19,  // 68: HistoryEvent.timerFired:type_name -> TimerFiredEvent
	20,  // 69: HistoryEvent.orchestratorStarted:type_name -> OrchestratorStartedEvent
	21,  // 70: HistoryEvent.orchestratorCompleted:type_name -> OrchestratorCompletedEvent
	22,  // 71: HistoryEvent.eventSent:type_name -> EventSentEvent
	23,  // 72: HistoryEvent.eventRaised:type_name -> EventRaisedEvent
	24,  // 73: HistoryEvent.genericEvent:type_name -> GenericEvent
	25,  // 74: HistoryEvent.historyState:type_name -> HistoryStateEvent
	26,  // 75: HistoryEvent.continueAsNew:type_name -> ContinueAsNewEvent
	27,  // 76: HistoryEvent.executionSuspended:type_name -> ExecutionSuspendedEvent
	28,  // 77: HistoryEvent.executionResumed:type_name -> ExecutionResumedEvent
	29,  // 78: HistoryEvent.entityOperationSignaled:type_name -> EntityOperationSignaledEvent
	30,  // 79: HistoryEvent.entityOperationCalled:type_name -> EntityOperationCalledEvent
	32,  // 80: HistoryEvent.entityOperationCompleted:type_name -> EntityOperationCompletedEvent
	33,  // 81: HistoryEvent.entityOperationFailed:type_name -> EntityOperationFailedEvent
	31,  // 82: HistoryEvent.entityLockRequested:type_name -> EntityLockRequestedEvent
	35,  // 83: HistoryEvent.entityLockGranted:type_name -> EntityLockGrantedEvent
	34,  // 84: HistoryEvent.entityUnlockSent:type_name -> EntityUnlockSentEvent
	112, // 85: ScheduleTaskAction.version:type_name -> google.protobuf.StringValue
	112, // 86: ScheduleTaskAction.input:type_name -> google.protobuf.StringValue
	112, // 87: CreateSubOrchestrationAction.version:type_name -> google.protobuf.StringValue
	112, // 88: CreateSubOrchestrationAction.input:type_name -> google.protobuf.StringValue
	113, // 89: CreateTimerAction.fireAt:type_name -> google.protobuf.Timestamp
	3,   // 90: SendEventAction.instance:type_name -> OrchestrationInstance
	112, // 91: SendEventAction.data:type_name -> google.protobuf.StringValue
	0,   // 92: CompleteOrchestrationAction.orchestrationStatus:type_name -> OrchestrationStatus
	112, // 93: CompleteOrchestrationAction.result:type_name -> google.protobuf.StringValue
	112, // 94: CompleteOrchestrationAction.details:type_name -> google.protobuf.StringValue
	112, // 95: CompleteOrchestrationAction.newVersion:type_name -> google.protobuf.StringValue
	36,  // 96: CompleteOrchestrationAction.carryoverEvents:type_name -> HistoryEvent
	6,   // 97: CompleteOrchestrationAction.failureDetails:type_name -> TaskFailureDetails
	112, // 98: TerminateOrchestrationAction.reason:type_name -> google.protobuf.StringValue
	29,  // 99: SendEntityMessageAction.entityOperationSignaled:type_name -> EntityOperationSignaledEvent
	30,  // 100: SendEntityMessageAction.entityOperationCalled:type_name -> EntityOperationCalledEvent
	31,  // 101: SendEntityMessageAction.entityLockRequested:type_name -> EntityLockRequestedEvent
	34,  // 102: SendEntityMessageAction.entityUnlockSent:type_name -> EntityUnlockSentEvent
	37,  // 103: OrchestratorAction.scheduleTask:type_name -> ScheduleTaskAction
	38,  // 104: OrchestratorAction.createSubOrchestration:type_name -> CreateSubOrchestrationAction
	39,  // 105: OrchestratorAction.createTimer:type_name -> CreateTimerAction
	40,  // 106: OrchestratorAction.sendEvent:type_name -> SendEventAction
	41,  // 107: OrchestratorAction.completeOrchestration:type_name -> CompleteOrchestrationAction
	42,  // 108: OrchestratorAction.terminateOrchestration:type_name -> TerminateOrchestrationAction
	43,  // 109: OrchestratorAction.sendEntityMessage:type_name -> SendEntityMessageAction
	112, // 110: OrchestratorRequest.executionId:type_name -> google.protobuf.StringValue
	36,  // 111: OrchestratorRequest.pastEvents:type_name -> HistoryEvent
	36,  // 112: OrchestratorRequest.newEvents:type_name -> HistoryEvent
	83,  // 113: OrchestratorRequest.entityParameters:type_name -> OrchestratorEntityParameters
	44,  // 114: OrchestratorResponse.actions:type_name -> OrchestratorAction
	112, // 115: OrchestratorResponse.customStatus:type_name -> google.protobuf.StringValue
	114, // 116: OrchestratorResponse.numEventsProcessed:type_name -> google.protobuf.Int32Value
	112, // 117: CreateInstanceRequest.version:type_name -> google.protobuf.StringValue
	112, // 118: CreateInstanceRequest.input:type_name -> google.protobuf.StringValue
	113, // 119: CreateInstanceRequest.scheduledStartTimestamp:type_name -> google.protobuf.Timestamp
	48,  // 120: CreateInstanceRequest.orchestrationIdReusePolicy:type_name -> OrchestrationIdReusePolicy
	112, // 121: CreateInstanceRequest.executionId:type_name -> google.protobuf.StringValue
	110, // 122: CreateInstanceRequest.tags:type_name -> CreateInstanceRequest.TagsEntry
	8,   // 123: CreateInstanceRequest.parentTraceContext:type_name -> TraceContext
	0,   // 124: OrchestrationIdReusePolicy.operationStatus:type_name -> OrchestrationStatus
	1,   // 125: OrchestrationIdReusePolicy.action:type_name -> CreateOrchestrationAction
	54,  // 126: GetInstanceResponse.orchestrationState:type_name -> OrchestrationState
	112, // 127: RewindInstanceRequest.reason:type_name -> google.protobuf.StringValue
	112, // 128: OrchestrationState.version:type_name -> google.protobuf.StringValue
	0,   // 129: OrchestrationState.orchestrationStatus:type_name -> OrchestrationStatus
	113, // 130: OrchestrationState.scheduledStartTimestamp:type_name -> google.protobuf.Timestamp
	113, // 131: OrchestrationState.createdTimestamp:type_name -> google.protobuf.Timestamp
	113, // 132: OrchestrationState.lastUpdatedTimestamp:type_name -> google.protobuf.Timestamp
	112, // 133: OrchestrationState.input:type_name -> google.protobuf.StringValue
	112, // 134: OrchestrationState.output:type_name -> google.protobuf.StringValue
	112, // 135: OrchestrationState.customStatus:type_name -> google.protobuf.StringValue
	6,   // 136: OrchestrationState.failureDetails:type_name -> TaskFailureDetails
	112, // 137: OrchestrationState.executionId:type_name -> google.protobuf.StringValue
	113, // 138: OrchestrationState.completedTimestamp:type_name -> google.protobuf.Timestamp
	112, // 139: OrchestrationState.parentInstanceId:type_name -> google.protobuf.StringValue
	111, // 140: OrchestrationState.tags:type_name -> OrchestrationState.TagsEntry
	112, // 141: RaiseEventRequest.input:type_name -> google.protobuf.StringValue
	112, // 142: TerminateRequest.output:type_name -> google.protobuf.StringValue
	112, // 143: SuspendRequest.reason:type_name -> google.protobuf.StringValue
	112, // 144: ResumeRequest.reason:type_name -> google.protobuf.StringValue
	64,  // 145: QueryInstancesRequest.query:type_name -> InstanceQuery
	0,   // 146: InstanceQuery.runtimeStatus:type_name -> OrchestrationStatus
	113, // 147: InstanceQuery.createdTimeFrom:type_name -> google.protobuf.Timestamp
	113, // 148: InstanceQuery.createdTimeTo:type_name -> google.protobuf.Timestamp
	112, // 149: InstanceQuery.taskHubNames:type_name -> google.protobuf.StringValue
	112, // 150: InstanceQuery.continuationToken:type_name -> google.protobuf.StringValue
	112, // 151: InstanceQuery.instanceIdPrefix:type_name -> google.protobuf.StringValue
	54,  // 152: QueryInstancesResponse.orchestrationState:type_name -> OrchestrationState
	112, // 153: QueryInstancesResponse.continuationToken:type_name -> google.protobuf.StringValue
	67,  // 154: PurgeInstancesRequest.purgeInstanceFilter:type_name -> PurgeInstanceFilter
	113, // 155: PurgeInstanceFilter.createdTimeFrom:type_name -> google.protobuf.Timestamp
	113, // 156: PurgeInstanceFilter.createdTimeTo:type_name -> google.protobuf.Timestamp
	0,   // 157: PurgeInstanceFilter.runtimeStatus:type_name -> OrchestrationStatus
	115, // 158: PurgeInstancesResponse.isComplete:type_name -> google.protobuf.BoolValue
	112, // 159: SignalEntityRequest.input:type_name -> google.protobuf.StringValue
	113, // 160: SignalEntityRequest.scheduledTime:type_name -> google.protobuf.Timestamp
	80,  // 161: GetEntityResponse.entity:type_name -> EntityMetadata
	112, // 162: EntityQuery.instanceIdStartsWith:type_name -> google.protobuf.StringValue
	113, // 163: EntityQuery.lastModifiedFrom:type_name -> google.protobuf.Timestamp
	113, // 164: EntityQuery.lastModifiedTo:type_name -> google.protobuf.Timestamp
	114, // 165: EntityQuery.pageSize:type_name -> google.protobuf.Int32Value
	112, // 166: EntityQuery.continuationToken:type_name -> google.protobuf.StringValue
	77,  // 167: QueryEntitiesRequest.query:type_name -> EntityQuery
	80,  // 168: QueryEntitiesResponse.entities:type_name -> EntityMetadata
	112, // 169: QueryEntitiesResponse.continuationToken:type_name -> google.protobuf.StringValue
	113, // 170: EntityMetadata.lastModifiedTime:type_name -> google.protobuf.Timestamp
	112, // 171: EntityMetadata.lockedBy:type_name -> google.protobuf.StringValue
	112, // 172: EntityMetadata.serializedState:type_name -> google.protobuf.StringValue
	112, // 173: CleanEntityStorageRequest.continuationToken:type_name -> google.protobuf.StringValue
	112, // 174: CleanEntityStorageResponse.continuationToken:type_name -> google.protobuf.StringValue
	116, // 175: OrchestratorEntityParameters.entityMessageReorderWindow:type_name -> google.protobuf.Duration
	112, // 176: EntityBatchRequest.entityState:type_name -> google.protobuf.StringValue
	87,  // 177: EntityBatchRequest.operations:type_name -> OperationRequest
	88,  // 178: EntityBatchResult.results:type_name -> OperationResult
	92,  // 179: EntityBatchResult.actions:type_name -> OperationAction
	112, // 180: EntityBatchResult.entityState:type_name -> google.protobuf.StringValue
	6,   // 181: EntityBatchResult.failureDetails:type_name -> TaskFailureDetails
	89,  // 182: EntityBatchResult.operationInfos:type_name -> OperationInfo
	112, // 183: EntityRequest.entityState:type_name -> google.protobuf.StringValue
	36,  // 184: EntityRequest.operationRequests:type_name -> HistoryEvent
	112, // 185: OperationRequest.input:type_name -> google.protobuf.StringValue
	90,  // 186: OperationResult.success:type_name -> OperationResultSuccess
	91,  // 187: OperationResult.failure:type_name -> OperationResultFailure
	3,   // 188: OperationInfo.responseDestination:type_name -> OrchestrationInstance
	112, // 189: OperationResultSuccess.result:type_name -> google.protobuf.StringValue
	6,   // 190: OperationResultFailure.failureDetails:type_name -> TaskFailureDetails
	93,  // 191: OperationAction.sendSignal:type_name -> SendSignalAction
	94,  // 192: OperationAction.startNewOrchestration:type_name -> StartNewOrchestrationAction
	112, // 193: SendSignalAction.input:type_name -> google.protobuf.StringValue
	113, // 194: SendSignalAction.scheduledTime:type_name -> google.protobuf.Timestamp
	112, // 195: StartNewOrchestrationAction.version:type_name -> google.protobuf.StringValue
	112, // 196: StartNewOrchestrationAction.input:type_name -> google.protobuf.StringValue
	113, // 197: StartNewOrchestrationAction.scheduledTime:type_name -> google.protobuf.Timestamp
	2,   // 198: GetWorkItemsRequest.capabilities:type_name -> WorkerCapability
	45,  // 199: WorkItem.orchestratorRequest:type_name -> OrchestratorRequest
	4,   // 200: WorkItem.activityRequest:type_name -> ActivityRequest
	84,  // 201: WorkItem.entityRequest:type_name -> EntityBatchRequest
	104, // 202: WorkItem.healthPing:type_name -> HealthPing
	86,  // 203: WorkItem.entityRequestV2:type_name -> EntityRequest
	112, // 204: StreamInstanceHistoryRequest.executionId:type_name -> google.protobuf.StringValue
	36,  // 205: HistoryChunk.events:type_name -> HistoryEvent
	112, // 206: RerunWorkflowFromEventRequest.input:type_name -> google.protobuf.StringValue
	117, // 207: TaskHubSidecarService.Hello:input_type -> google.protobuf.Empty
	47,  // 208: TaskHubSidecarService.StartInstance:input_type -> CreateInstanceRequest
	50,  // 209: TaskHubSidecarService.GetInstance:input_type -> GetInstanceRequest
	52,  // 210: TaskHubSidecarService.RewindInstance:input_type -> RewindInstanceRequest
	50,  // 211: TaskHubSidecarService.WaitForInstanceStart:input_type -> GetInstanceRequest
	50,  // 212: TaskHubSidecarService.WaitForInstanceCompletion:input_type -> GetInstanceRequest
	55,  // 213: TaskHubSidecarService.RaiseEvent:input_type -> RaiseEventRequest
	57,  // 214: TaskHubSidecarService.TerminateInstance:input_type -> TerminateRequest
	59,  // 215: TaskHubSidecarService.SuspendInstance:input_type -> SuspendRequest
	61,  // 216: TaskHubSidecarService.ResumeInstance:input_type -> ResumeRequest
	63,  // 217: TaskHubSidecarService.QueryInstances:input_type -> QueryInstancesRequest
	66,  // 218: TaskHubSidecarService.PurgeInstances:input_type -> PurgeInstancesRequest
	101, // 219: TaskHubSidecarService.GetWorkItems:input_type -> GetWorkItemsRequest
	5,   // 220: TaskHubSidecarService.CompleteActivityTask:input_type -> ActivityResponse
	46,  // 221: TaskHubSidecarService.CompleteOrchestratorTask:input_type -> OrchestratorResponse
	85,  // 222: TaskHubSidecarService.CompleteEntityTask:input_type -> EntityBatchResult
	105, // 223: TaskHubSidecarService.StreamInstanceHistory:input_type -> StreamInstanceHistoryRequest
	69,  // 224: TaskHubSidecarService.CreateTaskHub:input_type -> CreateTaskHubRequest
	71,  // 225: TaskHubSidecarService.DeleteTaskHub:input_type -> DeleteTaskHubRequest
	73,  // 226: TaskHubSidecarService.SignalEntity:input_type -> SignalEntityRequest
	75,  // 227: TaskHubSidecarService.GetEntity:input_type -> GetEntityRequest
	78,  // 228: TaskHubSidecarService.QueryEntities:input_type -> QueryEntitiesRequest
	81,  // 229: TaskHubSidecarService.CleanEntityStorage:input_type -> CleanEntityStorageRequest
	95,  // 230: TaskHubSidecarService.AbandonTaskActivityWorkItem:input_type -> AbandonActivityTaskRequest
	97,  // 231: TaskHubSidecarService.AbandonTaskOrchestratorWorkItem:input_type -> AbandonOrchestrationTaskRequest
	99,  // 232: TaskHubSidecarService.AbandonTaskEntityWorkItem:input_type -> AbandonEntityTaskRequest
	107, // 233: TaskHubSidecarService.RerunWorkflowFromEvent:input_type -> RerunWorkflowFromEventRequest
	117, // 234: TaskHubSidecarService.Hello:output_type -> google.protobuf.Empty
	49,  // 235: TaskHubSidecarService.StartInstance:output_type -> CreateInstanceResponse
	51,  // 236: TaskHubSidecarService.GetInstance:output_type -> GetInstanceResponse
	53,  // 237: TaskHubSidecarService.RewindInstance:output_type -> RewindInstanceResponse
	51,  // 238: TaskHubSidecarService.WaitForInstanceStart:output_type -> GetInstanceResponse
	51,  // 239: TaskHubSidecarService.WaitForInstanceCompletion:output_type -> GetInstanceResponse
	56,  // 240: TaskHubSidecarService.RaiseEvent:output_type -> RaiseEventResponse
	58,  // 241: TaskHubSidecarService.TerminateInstance:output_type -> TerminateResponse
	60,  // 242: TaskHubSidecarService.SuspendInstance:output_type -> SuspendResponse
	62,  // 243: TaskHubSidecarService.ResumeInstance:output_type -> ResumeResponse
	65,  // 244: TaskHubSidecarService.QueryInstances:output_type -> QueryInstancesResponse
	68,  // 245: TaskHubSidecarService.PurgeInstances:output_type -> PurgeInstancesResponse
	102, // 246: TaskHubSidecarService.GetWorkItems:output_type -> WorkItem
	103, // 247: TaskHubSidecarService.CompleteActivityTask:output_type -> CompleteTaskResponse
	103, // 248: TaskHubSidecarService.CompleteOrchestratorTask:output_type -> CompleteTaskResponse
	103, // 249: TaskHubSidecarService.CompleteEntityTask:output_type -> CompleteTaskResponse
	106, // 250: TaskHubSidecarService.StreamInstanceHistory:output_type -> HistoryChunk
	70,  // 251: TaskHubSidecarService.CreateTaskHub:output_type -> CreateTaskHubResponse
	72,  // 252: TaskHubSidecarService.DeleteTaskHub:output_type -> DeleteTaskHubResponse
	74,  // 253: TaskHubSidecarService.SignalEntity:output_type -> SignalEntityResponse
	76,  // 254: TaskHubSidecarService.GetEntity:output_type -> GetEntityResponse
	79,  // 255: TaskHubSidecarService.QueryEntities:output_type -> QueryEntitiesResponse
	82,  // 256: TaskHubSidecarService.CleanEntityStorage:output_type -> CleanEntityStorageResponse
	96,  // 257: TaskHubSidecarService.AbandonTaskActivityWorkItem:output_type -> AbandonActivityTaskResponse
	98,  // 258: TaskHubSidecarService.AbandonTaskOrchestratorWorkItem:output_type -> AbandonOrchestrationTaskResponse
	100, // 259: TaskHubSidecarService.AbandonTaskEntityWorkItem:output_type -> AbandonEntityTaskResponse
	108, // 260: TaskHubSidecarService.RerunWorkflowFromEvent:output_type -> RerunWorkflowFromEventResponse
	234, // [234:261] is the sub-list for method output_type
	207, // [207:234] is the sub-list for method input_type
	207, // [207:207] is the sub-list for extension type_name
	207, // [207:207] is the sub-list for extension extendee
	0,   // [0:207] is the sub-list for field type_name
}

func init() { file_orchestrator_service_proto_init() }
func file_orchestrator_service_proto_init() {
	if File_orchestrator_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orchestrator_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestrationInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFailureDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentInstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTerminatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskScheduledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrchestrationInstanceCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrchestrationInstanceCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrchestrationInstanceFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerFiredEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRaisedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueAsNewEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionSuspendedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionResumedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityOperationSignaledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityOperationCalledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLockRequestedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityOperationCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityOperationFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityUnlockSentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLockGrantedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTaskAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubOrchestrationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteOrchestrationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateOrchestrationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEntityMessageAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestrationIdReusePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewindInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewindInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestrationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaiseEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaiseEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeInstanceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskHubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskHubResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskHubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskHubResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanEntityStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanEntityStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorEntityParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityBatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationResultSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationResultFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSignalAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartNewOrchestrationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonActivityTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonActivityTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonOrchestrationTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonOrchestrationTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonEntityTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonEntityTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInstanceHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunWorkflowFromEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orchestrator_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunWorkflowFromEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_orchestrator_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_orchestrator_service_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*HistoryEvent_ExecutionStarted)(nil),
		(*HistoryEvent_ExecutionCompleted)(nil),
		(*HistoryEvent_ExecutionTerminated)(nil),
		(*HistoryEvent_TaskScheduled)(nil),
		(*HistoryEvent_TaskCompleted)(nil),
		(*HistoryEvent_TaskFailed)(nil),
		(*HistoryEvent_SubOrchestrationInstanceCreated)(nil),
		(*HistoryEvent_SubOrchestrationInstanceCompleted)(nil),
		(*HistoryEvent_SubOrchestrationInstanceFailed)(nil),
		(*HistoryEvent_TimerCreated)(nil),
		(*HistoryEvent_TimerFired)(nil),
		(*HistoryEvent_OrchestratorStarted)(nil),
		(*HistoryEvent_OrchestratorCompleted)(nil),
		(*HistoryEvent_EventSent)(nil),
		(*HistoryEvent_EventRaised)(nil),
		(*HistoryEvent_GenericEvent)(nil),
		(*HistoryEvent_HistoryState)(nil),
		(*HistoryEvent_ContinueAsNew)(nil),
		(*HistoryEvent_ExecutionSuspended)(nil),
		(*HistoryEvent_ExecutionResumed)(nil),
		(*HistoryEvent_EntityOperationSignaled)(nil),
		(*HistoryEvent_EntityOperationCalled)(nil),
		(*HistoryEvent_EntityOperationCompleted)(nil),
		(*HistoryEvent_EntityOperationFailed)(nil),
		(*HistoryEvent_EntityLockRequested)(nil),
		(*HistoryEvent_EntityLockGranted)(nil),
		(*HistoryEvent_EntityUnlockSent)(nil),
	}
	file_orchestrator_service_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_orchestrator_service_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*SendEntityMessageAction_EntityOperationSignaled)(nil),
		(*SendEntityMessageAction_EntityOperationCalled)(nil),
		(*SendEntityMessageAction_EntityLockRequested)(nil),
		(*SendEntityMessageAction_EntityUnlockSent)(nil),
	}
	file_orchestrator_service_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*OrchestratorAction_ScheduleTask)(nil),
		(*OrchestratorAction_CreateSubOrchestration)(nil),
		(*OrchestratorAction_CreateTimer)(nil),
		(*OrchestratorAction_SendEvent)(nil),
		(*OrchestratorAction_CompleteOrchestration)(nil),
		(*OrchestratorAction_TerminateOrchestration)(nil),
		(*OrchestratorAction_SendEntityMessage)(nil),
	}
	file_orchestrator_service_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*PurgeInstancesRequest_InstanceId)(nil),
		(*PurgeInstancesRequest_PurgeInstanceFilter)(nil),
	}
	file_orchestrator_service_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*OperationResult_Success)(nil),
		(*OperationResult_Failure)(nil),
	}
	file_orchestrator_service_proto_msgTypes[89].OneofWrappers = []interface{}{
		(*OperationAction_SendSignal)(nil),
		(*OperationAction_StartNewOrchestration)(nil),
	}
	file_orchestrator_service_proto_msgTypes[99].OneofWrappers = []interface{}{
		(*WorkItem_OrchestratorRequest)(nil),
		(*WorkItem_ActivityRequest)(nil),
		(*WorkItem_EntityRequest)(nil),
		(*WorkItem_HealthPing)(nil),
		(*WorkItem_EntityRequestV2)(nil),
	}
	file_orchestrator_service_proto_msgTypes[104].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orchestrator_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   109,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orchestrator_service_proto_goTypes,
		DependencyIndexes: file_orchestrator_service_proto_depIdxs,
		EnumInfos:         file_orchestrator_service_proto_enumTypes,
		MessageInfos:      file_orchestrator_service_proto_msgTypes,
	}.Build()
	File_orchestrator_service_proto = out.File
	file_orchestrator_service_proto_rawDesc = nil
	file_orchestrator_service_proto_goTypes = nil
	file_orchestrator_service_proto_depIdxs = nil
}
